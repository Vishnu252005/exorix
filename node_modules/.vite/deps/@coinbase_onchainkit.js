import {
  base,
  baseSepolia,
  mainnet,
  sepolia
} from "./chunk-YBUQXR5B.js";
import {
  coinbaseWallet
} from "./chunk-Y6CI2SWW.js";
import {
  WagmiProvider,
  WagmiProviderNotFoundError,
  useConfig
} from "./chunk-YRYH6FNM.js";
import {
  cookieStorage,
  createConfig,
  createStorage
} from "./chunk-ACDTLC4I.js";
import {
  http
} from "./chunk-AERMZCYX.js";
import "./chunk-MH5B5U67.js";
import "./chunk-CZCSEOQV.js";
import "./chunk-QFMNQR3I.js";
import "./chunk-CRYBMUGN.js";
import "./chunk-JKTLYEOV.js";
import "./chunk-FJXQD5XT.js";
import "./chunk-IOJX74IG.js";
import {
  QueryClient,
  QueryClientProvider,
  useQueryClient
} from "./chunk-EK5CQ6RM.js";
import {
  require_jsx_runtime
} from "./chunk-AGWB3WMV.js";
import {
  require_react
} from "./chunk-XYQR56ZF.js";
import {
  __toESM
} from "./chunk-64NT3AJW.js";

// node_modules/@coinbase/onchainkit/esm/core/utils/isBase.js
function isBase({
  chainId,
  isMainnetOnly = false
}) {
  if (isMainnetOnly && chainId === base.id) {
    return true;
  }
  if (!isMainnetOnly && (chainId === baseSepolia.id || chainId === base.id)) {
    return true;
  }
  return false;
}

// node_modules/@coinbase/onchainkit/esm/core/utils/isEthereum.js
function isEthereum({
  chainId,
  isMainnetOnly = false
}) {
  if (isMainnetOnly && chainId === mainnet.id) {
    return true;
  }
  if (!isMainnetOnly && (chainId === sepolia.id || chainId === mainnet.id)) {
    return true;
  }
  return false;
}

// node_modules/@coinbase/onchainkit/esm/core/OnchainKitConfig.js
var ONCHAIN_KIT_CONFIG = {
  address: null,
  apiKey: null,
  chain: baseSepolia,
  config: {
    analytics: true,
    analyticsUrl: null,
    appearance: {
      name: null,
      logo: null,
      mode: null,
      theme: null
    },
    paymaster: null,
    wallet: {
      display: null,
      termsUrl: null,
      privacyUrl: null,
      supportedWallets: {
        rabby: false,
        trust: false,
        frame: false
      }
    }
  },
  rpcUrl: null,
  schemaId: null,
  projectId: null,
  sessionId: null
};
var getOnchainKitConfig = (configName) => {
  return ONCHAIN_KIT_CONFIG[configName];
};
var setOnchainKitConfig = (properties) => {
  Object.assign(ONCHAIN_KIT_CONFIG, properties);
  return getOnchainKitConfig;
};

// node_modules/@coinbase/onchainkit/esm/OnchainKitProvider.js
var import_react5 = __toESM(require_react(), 1);

// node_modules/@coinbase/onchainkit/esm/DefaultOnchainKitProviders.js
var import_react2 = __toESM(require_react(), 1);

// node_modules/@coinbase/onchainkit/esm/core/createWagmiConfig.js
var createWagmiConfig = ({
  apiKey,
  appName,
  appLogoUrl,
  connectors = [coinbaseWallet({
    appName,
    appLogoUrl,
    preference: "all"
  })]
}) => {
  return createConfig({
    chains: [base, baseSepolia],
    connectors,
    storage: createStorage({
      storage: cookieStorage
    }),
    ssr: true,
    transports: {
      [base.id]: apiKey ? http(`https://api.developer.coinbase.com/rpc/v1/base/${apiKey}`) : http(),
      [baseSepolia.id]: apiKey ? http(`https://api.developer.coinbase.com/rpc/v1/base-sepolia/${apiKey}`) : http()
    }
  });
};

// node_modules/@coinbase/onchainkit/esm/internal/hooks/useProviderDependencies.js
var import_react = __toESM(require_react(), 1);
function useProviderDependencies() {
  let providedWagmiConfig = null;
  let providedQueryClient = null;
  try {
    providedWagmiConfig = useConfig();
  } catch (error) {
    if (!(error instanceof WagmiProviderNotFoundError)) {
      console.error("Error fetching WagmiProvider, using default:", error);
    }
  }
  try {
    providedQueryClient = useQueryClient();
  } catch (error) {
    if (!(error.message === "No QueryClient set, use QueryClientProvider to set one")) {
      console.error("Error fetching QueryClient, using default:", error);
    }
  }
  return (0, import_react.useMemo)(() => {
    return {
      providedWagmiConfig,
      providedQueryClient
    };
  }, [providedWagmiConfig, providedQueryClient]);
}

// node_modules/@coinbase/onchainkit/esm/DefaultOnchainKitProviders.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
function DefaultOnchainKitProviders({
  apiKey,
  appName,
  appLogoUrl,
  connectors = [coinbaseWallet({
    appName,
    appLogoUrl,
    preference: "all"
  })],
  children
}) {
  const _useProviderDependenc = useProviderDependencies(), providedWagmiConfig = _useProviderDependenc.providedWagmiConfig, providedQueryClient = _useProviderDependenc.providedQueryClient;
  const defaultConfig = (0, import_react2.useMemo)(() => {
    return providedWagmiConfig || createWagmiConfig({
      apiKey,
      appName,
      appLogoUrl,
      connectors
    });
  }, [apiKey, appName, appLogoUrl, connectors, providedWagmiConfig]);
  const defaultQueryClient = (0, import_react2.useMemo)(() => {
    return providedQueryClient || new QueryClient();
  }, [providedQueryClient]);
  if (!providedWagmiConfig && !providedQueryClient) {
    return (0, import_jsx_runtime.jsx)(WagmiProvider, {
      config: defaultConfig,
      children: (0, import_jsx_runtime.jsx)(QueryClientProvider, {
        client: defaultQueryClient,
        children
      })
    });
  }
  return children;
}

// node_modules/@coinbase/onchainkit/esm/OnchainKitProviderBoundary.js
var import_react4 = __toESM(require_react(), 1);

// node_modules/@coinbase/onchainkit/esm/core/analytics/constants.js
var ANALYTICS_API_URL = "https://api.developer.coinbase.com/analytics";

// node_modules/@coinbase/onchainkit/esm/version.js
var version = "0.38.7";

// node_modules/@coinbase/onchainkit/esm/core/network/constants.js
var JSON_HEADERS = {
  "Content-Type": "application/json",
  "OnchainKit-Version": version
};
var RequestContext = function(RequestContext2) {
  RequestContext2["API"] = "api";
  RequestContext2["Buy"] = "buy";
  RequestContext2["Checkout"] = "checkout";
  RequestContext2["Hook"] = "hook";
  RequestContext2["NFT"] = "nft";
  RequestContext2["Swap"] = "swap";
  RequestContext2["Wallet"] = "wallet";
  return RequestContext2;
}({});

// node_modules/@coinbase/onchainkit/esm/core/analytics/utils/sendAnalytics.js
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var sendAnalytics = async (request) => {
  try {
    await fetch(request.url, {
      method: "POST",
      headers: _objectSpread(_objectSpread({}, JSON_HEADERS), request.headers),
      body: JSON.stringify(request.body)
    });
  } catch (error) {
    if (true) {
      console.error("Error sending analytics:", error);
    }
  }
};

// node_modules/@coinbase/onchainkit/esm/core/analytics/hooks/useAnalytics.js
var import_react3 = __toESM(require_react(), 1);
var prepareAnalyticsPayload = (event, data) => {
  const config = getOnchainKitConfig("config");
  return {
    url: (config == null ? void 0 : config.analyticsUrl) ?? ANALYTICS_API_URL,
    headers: {
      "OnchainKit-App-Name": document.title
    },
    body: {
      apiKey: getOnchainKitConfig("apiKey") ?? "undefined",
      sessionId: getOnchainKitConfig("sessionId") ?? "undefined",
      timestamp: Date.now(),
      eventType: event,
      data,
      origin: window.location.origin
    }
  };
};
function sendAnalyticsPayload(event, data) {
  const config = getOnchainKitConfig("config");
  if (!(config == null ? void 0 : config.analytics)) {
    return;
  }
  const payload = prepareAnalyticsPayload(event, data);
  sendAnalytics(payload);
}

// node_modules/@coinbase/onchainkit/esm/core/analytics/types.js
var WalletEvent = function(WalletEvent2) {
  WalletEvent2["ConnectError"] = "walletConnectError";
  WalletEvent2["ConnectInitiated"] = "walletConnectInitiated";
  WalletEvent2["ConnectSuccess"] = "walletConnectSuccess";
  WalletEvent2["Disconnect"] = "walletDisconnect";
  WalletEvent2["OptionSelected"] = "walletOptionSelected";
  WalletEvent2["ConnectCanceled"] = "walletConnectCanceled";
  return WalletEvent2;
}({});
var WalletOption = function(WalletOption2) {
  WalletOption2["Buy"] = "buy";
  WalletOption2["Explorer"] = "explorer";
  WalletOption2["QR"] = "qr";
  WalletOption2["Refresh"] = "refresh";
  WalletOption2["Send"] = "send";
  WalletOption2["Swap"] = "swap";
  return WalletOption2;
}({});
var SwapEvent = function(SwapEvent2) {
  SwapEvent2["SlippageChanged"] = "swapSlippageChanged";
  SwapEvent2["TokenSelected"] = "swapTokenSelected";
  SwapEvent2["SwapSuccess"] = "swapSuccess";
  SwapEvent2["SwapInitiated"] = "swapInitiated";
  SwapEvent2["SwapFailure"] = "swapFailure";
  SwapEvent2["SwapCanceled"] = "swapCanceled";
  return SwapEvent2;
}({});
var BuyOption = function(BuyOption2) {
  BuyOption2["APPLE_PAY"] = "apple_pay";
  BuyOption2["COINBASE"] = "coinbase_account";
  BuyOption2["DEBIT_CARD"] = "debit_card";
  BuyOption2["ETH"] = "eth";
  BuyOption2["USDC"] = "usdc";
  return BuyOption2;
}({});
var BuyEvent = function(BuyEvent2) {
  BuyEvent2["BuyFailure"] = "buyFailure";
  BuyEvent2["BuyInitiated"] = "buyInitiated";
  BuyEvent2["BuyOptionSelected"] = "buyOptionSelected";
  BuyEvent2["BuySuccess"] = "buySuccess";
  BuyEvent2["BuyCanceled"] = "buyCanceled";
  return BuyEvent2;
}({});
var CheckoutEvent = function(CheckoutEvent2) {
  CheckoutEvent2["CheckoutFailure"] = "checkoutFailure";
  CheckoutEvent2["CheckoutInitiated"] = "checkoutInitiated";
  CheckoutEvent2["CheckoutSuccess"] = "checkoutSuccess";
  CheckoutEvent2["CheckoutCanceled"] = "checkoutCanceled";
  return CheckoutEvent2;
}({});
var MintEvent = function(MintEvent2) {
  MintEvent2["MintFailure"] = "mintFailure";
  MintEvent2["MintInitiated"] = "mintInitiated";
  MintEvent2["MintQuantityChanged"] = "mintQuantityChanged";
  MintEvent2["MintSuccess"] = "mintSuccess";
  MintEvent2["MintCanceled"] = "mintCanceled";
  return MintEvent2;
}({});
var TransactionEvent = function(TransactionEvent2) {
  TransactionEvent2["TransactionFailure"] = "transactionFailure";
  TransactionEvent2["TransactionInitiated"] = "transactionInitiated";
  TransactionEvent2["TransactionSuccess"] = "transactionSuccess";
  TransactionEvent2["TransactionCanceled"] = "transactionCanceled";
  return TransactionEvent2;
}({});
var FundEvent = function(FundEvent2) {
  FundEvent2["FundAmountChanged"] = "fundAmountChanged";
  FundEvent2["FundFailure"] = "fundFailure";
  FundEvent2["FundInitiated"] = "fundInitiated";
  FundEvent2["FundOptionSelected"] = "fundOptionSelected";
  FundEvent2["FundSuccess"] = "fundSuccess";
  FundEvent2["FundCanceled"] = "fundCanceled";
  return FundEvent2;
}({});
var EarnEvent = function(EarnEvent2) {
  EarnEvent2["EarnDepositInitiated"] = "earnDepositInitiated";
  EarnEvent2["EarnDepositSuccess"] = "earnDepositSuccess";
  EarnEvent2["EarnDepositFailure"] = "earnDepositFailure";
  EarnEvent2["EarnDepositCanceled"] = "earnDepositCanceled";
  EarnEvent2["EarnWithdrawInitiated"] = "earnWithdrawInitiated";
  EarnEvent2["EarnWithdrawSuccess"] = "earnWithdrawSuccess";
  EarnEvent2["EarnWithdrawFailure"] = "earnWithdrawFailure";
  EarnEvent2["EarnWithdrawCanceled"] = "earnWithdrawCanceled";
  return EarnEvent2;
}({});
var AppchainEvent = function(AppchainEvent2) {
  AppchainEvent2["AppchainBridgeDepositInitiated"] = "appchainBridgeDepositInitiated";
  AppchainEvent2["AppchainBridgeDepositSuccess"] = "appchainBridgeDepositSuccess";
  AppchainEvent2["AppchainBridgeDepositFailure"] = "appchainBridgeDepositFailure";
  AppchainEvent2["AppchainBridgeWithdrawInitiated"] = "appchainBridgeWithdrawInitiated";
  AppchainEvent2["AppchainBridgeWithdrawSuccess"] = "appchainBridgeWithdrawSuccess";
  AppchainEvent2["AppchainBridgeWithdrawFailure"] = "appchainBridgeWithdrawFailure";
  AppchainEvent2["AppchainBridgeWaitForClaimFailure"] = "appchainBridgeWaitForClaimFailure";
  AppchainEvent2["AppchainBridgeClaimSuccess"] = "appchainBridgeClaimSuccess";
  AppchainEvent2["AppchainBridgeClaimFailure"] = "appchainBridgeClaimFailure";
  return AppchainEvent2;
}({});
var ErrorEvent = function(ErrorEvent2) {
  ErrorEvent2["ComponentError"] = "componentError";
  return ErrorEvent2;
}({});

// node_modules/@coinbase/onchainkit/esm/OnchainKitProviderBoundary.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var OnchainKitProviderBoundary = class extends import_react4.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      error: null
    };
  }
  static getDerivedStateFromError(error) {
    return {
      error
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error("Uncaught error:", error, errorInfo);
    sendAnalyticsPayload(ErrorEvent.ComponentError, {
      component: "OnchainKitProviderBoundary",
      error: error.message,
      metadata: {
        message: error.message,
        stack: errorInfo.componentStack
      }
    });
  }
  render() {
    if (this.state.error) {
      if (this.props.fallback) {
        const Fallback = this.props.fallback;
        return (0, import_jsx_runtime2.jsx)(Fallback, {
          error: this.state.error
        });
      }
      return (0, import_jsx_runtime2.jsx)("h1", {
        children: "Sorry, we had an unhandled error"
      });
    }
    return this.props.children;
  }
};

// node_modules/@coinbase/onchainkit/esm/core/constants.js
var Capabilities = function(Capabilities2) {
  Capabilities2["AtomicBatch"] = "atomicBatch";
  Capabilities2["AuxiliaryFunds"] = "auxiliaryFunds";
  Capabilities2["PaymasterService"] = "paymasterService";
  return Capabilities2;
}({});
var DEFAULT_PRIVACY_URL = "https://base.org/privacy-policy";
var DEFAULT_TERMS_URL = "https://base.org/terms-of-service";

// node_modules/@coinbase/onchainkit/esm/identity/constants.js
var RESOLVER_ADDRESSES_BY_CHAIN_ID = {
  [baseSepolia.id]: "0x6533C94869D28fAA8dF77cc63f9e2b2D6Cf77eBA",
  [base.id]: "0xC6d566A56A1aFf6508b41f6c90ff131615583BCD"
};
var COINBASE_VERIFIED_ACCOUNT_SCHEMA_ID = "0xf8b05c79f090979bf4a80270aba232dff11a10d9ca55c4f88de95317970f0de9";

// node_modules/@coinbase/onchainkit/esm/internal/utils/checkHashLength.js
function checkHashLength(hash, length) {
  return new RegExp(`^0x[a-fA-F0-9]{${length}}$`).test(hash);
}

// node_modules/@coinbase/onchainkit/esm/OnchainKitProvider.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var OnchainKitContext = (0, import_react5.createContext)(ONCHAIN_KIT_CONFIG);
function OnchainKitProvider({
  address,
  analytics,
  apiKey,
  chain,
  children,
  config,
  projectId,
  rpcUrl,
  schemaId
}) {
  if (schemaId && !checkHashLength(schemaId, 64)) {
    throw Error('EAS schemaId must be 64 characters prefixed with "0x"');
  }
  const sessionId = (0, import_react5.useMemo)(() => crypto.randomUUID(), []);
  const value = (0, import_react5.useMemo)(() => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
    const defaultPaymasterUrl = apiKey ? `https://api.developer.coinbase.com/rpc/v1/${chain.name.replace(" ", "-").toLowerCase()}/${apiKey}` : null;
    const onchainKitConfig = {
      address: address ?? null,
      apiKey: apiKey ?? null,
      chain,
      config: {
        analytics: analytics ?? true,
        analyticsUrl: (config == null ? void 0 : config.analyticsUrl) ?? null,
        appearance: {
          name: ((_a = config == null ? void 0 : config.appearance) == null ? void 0 : _a.name) ?? "Dapp",
          logo: ((_b = config == null ? void 0 : config.appearance) == null ? void 0 : _b.logo) ?? "",
          mode: ((_c = config == null ? void 0 : config.appearance) == null ? void 0 : _c.mode) ?? "auto",
          theme: ((_d = config == null ? void 0 : config.appearance) == null ? void 0 : _d.theme) ?? "default"
        },
        paymaster: (config == null ? void 0 : config.paymaster) || defaultPaymasterUrl,
        wallet: {
          display: ((_e = config == null ? void 0 : config.wallet) == null ? void 0 : _e.display) ?? "classic",
          termsUrl: ((_f = config == null ? void 0 : config.wallet) == null ? void 0 : _f.termsUrl) || DEFAULT_TERMS_URL,
          privacyUrl: ((_g = config == null ? void 0 : config.wallet) == null ? void 0 : _g.privacyUrl) || DEFAULT_PRIVACY_URL,
          supportedWallets: {
            rabby: ((_i = (_h = config == null ? void 0 : config.wallet) == null ? void 0 : _h.supportedWallets) == null ? void 0 : _i.rabby) ?? false,
            trust: ((_k = (_j = config == null ? void 0 : config.wallet) == null ? void 0 : _j.supportedWallets) == null ? void 0 : _k.trust) ?? false,
            frame: ((_m = (_l = config == null ? void 0 : config.wallet) == null ? void 0 : _l.supportedWallets) == null ? void 0 : _m.frame) ?? false
          }
        }
      },
      projectId: projectId ?? null,
      rpcUrl: rpcUrl ?? null,
      schemaId: schemaId ?? COINBASE_VERIFIED_ACCOUNT_SCHEMA_ID,
      sessionId
    };
    setOnchainKitConfig(onchainKitConfig);
    return onchainKitConfig;
  }, [address, analytics, apiKey, chain, config, projectId, rpcUrl, schemaId, sessionId]);
  return (0, import_jsx_runtime3.jsx)(DefaultOnchainKitProviders, {
    apiKey,
    appName: value.config.appearance.name,
    appLogoUrl: value.config.appearance.logo,
    children: (0, import_jsx_runtime3.jsx)(OnchainKitContext.Provider, {
      value,
      children: (0, import_jsx_runtime3.jsx)(OnchainKitProviderBoundary, {
        children
      })
    })
  });
}

// node_modules/@coinbase/onchainkit/esm/useOnchainKit.js
var import_react6 = __toESM(require_react(), 1);
function useOnchainKit() {
  return (0, import_react6.useContext)(OnchainKitContext);
}
export {
  OnchainKitProvider,
  getOnchainKitConfig,
  isBase,
  isEthereum,
  setOnchainKitConfig,
  useOnchainKit,
  version
};
//# sourceMappingURL=@coinbase_onchainkit.js.map
