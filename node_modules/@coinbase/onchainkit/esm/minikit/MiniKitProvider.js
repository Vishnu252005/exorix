'use client';
const _excluded = ["children", "notificationProxyUrl"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
import { DefaultOnchainKitProviders } from '../DefaultOnchainKitProviders.js';
import { OnchainKitProvider } from '../OnchainKitProvider.js';
import sdk from '@farcaster/frame-sdk';
import { farcasterFrame } from '@farcaster/frame-wagmi-connector';
import { createContext, useState, useEffect, useCallback, useMemo } from 'react';
import { coinbaseWallet } from 'wagmi/connectors';
import { jsx } from 'react/jsx-runtime';
const emptyContext = {};
const MiniKitContext = /*#__PURE__*/createContext(emptyContext);
/**
 * Provides the MiniKit React Context to the app.
 */
function MiniKitProvider(_ref) {
  let children = _ref.children,
    _ref$notificationProx = _ref.notificationProxyUrl,
    notificationProxyUrl = _ref$notificationProx === void 0 ? '/api/notify' : _ref$notificationProx,
    onchainKitProps = _objectWithoutProperties(_ref, _excluded);
  const _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    context = _useState2[0],
    setContext = _useState2[1];
  useEffect(() => {
    sdk.on('frameAdded', ({
      notificationDetails
    }) => {
      if (notificationDetails) {
        updateClientContext({
          details: notificationDetails,
          frameAdded: true
        });
      }
    });
    sdk.on('frameAddRejected', ({
      reason
    }) => {
      console.error('Frame add rejected', reason);
    });
    sdk.on('frameRemoved', () => {
      updateClientContext({
        details: undefined,
        frameAdded: false
      });
    });
    sdk.on('notificationsEnabled', ({
      notificationDetails
    }) => {
      updateClientContext({
        details: notificationDetails
      });
    });
    sdk.on('notificationsDisabled', () => {
      updateClientContext({
        details: undefined
      });
    });
    async function fetchContext() {
      try {
        // if not running in a frame, context resolves as undefined
        const context = await sdk.context;
        setContext(context);
      } catch (error) {
        console.error('Error fetching context:', error);
      }
    }
    fetchContext();
    return () => {
      sdk.removeAllListeners();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  const updateClientContext = useCallback(({
    details,
    frameAdded
  }) => {
    setContext(prevContext => {
      if (!prevContext) {
        return null;
      }
      return _objectSpread(_objectSpread({}, prevContext), {}, {
        client: _objectSpread(_objectSpread({}, prevContext.client), {}, {
          notificationDetails: details ?? undefined,
          added: frameAdded ?? prevContext.client.added
        })
      });
    });
  }, []);
  const connectors = useMemo(() => {
    return [context // if context is set, the app is running in a frame, use farcasterFrame connector
    ? farcasterFrame() : coinbaseWallet({
      appName: process.env.NEXT_PUBLIC_ONCHAINKIT_PROJECT_NAME,
      appLogoUrl: process.env.NEXT_PUBLIC_ICON_URL,
      preference: 'all'
    })];
  }, [context]);
  const value = useMemo(() => {
    return {
      context,
      updateClientContext,
      notificationProxyUrl
    };
  }, [updateClientContext, notificationProxyUrl, context]);
  return /*#__PURE__*/jsx(MiniKitContext.Provider, {
    value: value,
    children: /*#__PURE__*/jsx(DefaultOnchainKitProviders, {
      apiKey: onchainKitProps.apiKey,
      appName: onchainKitProps.config?.appearance?.name ?? undefined,
      appLogoUrl: onchainKitProps.config?.appearance?.logo ?? undefined,
      connectors: connectors,
      children: /*#__PURE__*/jsx(OnchainKitProvider, _objectSpread(_objectSpread({}, onchainKitProps), {}, {
        children: /*#__PURE__*/jsx("div", {
          style: {
            paddingTop: context?.client.safeAreaInsets?.top ?? 0,
            paddingBottom: context?.client.safeAreaInsets?.bottom ?? 0,
            paddingLeft: context?.client.safeAreaInsets?.left ?? 0,
            paddingRight: context?.client.safeAreaInsets?.right ?? 0
          },
          children: children
        })
      }))
    })
  });
}
export { MiniKitContext, MiniKitProvider, emptyContext };
//# sourceMappingURL=MiniKitProvider.js.map
