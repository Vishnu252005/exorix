function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { useState, useCallback, useMemo } from 'react';
import { useWalletContext } from '../../WalletProvider.js';
import { resolveAddressInput } from '../utils/resolveAddressInput.js';
import { SendAddressInput } from './SendAddressInput.js';
import { SendAddressSelector } from './SendAddressSelector.js';
import { useSendContext } from './SendProvider.js';
import { jsx, jsxs } from 'react/jsx-runtime';
function SendAddressSelection({
  classNames
}) {
  const _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    recipientInput = _useState2[0],
    setRecipientInput = _useState2[1];
  const _useState3 = useState({
      displayValue: '',
      address: null
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    validatedInput = _useState4[0],
    setValidatedInput = _useState4[1];
  const _useWalletContext = useWalletContext(),
    senderChain = _useWalletContext.chain;
  const _useSendContext = useSendContext(),
    selectedRecipient = _useSendContext.selectedRecipient,
    handleRecipientSelection = _useSendContext.handleRecipientSelection,
    handleRecipientInputChange = _useSendContext.handleRecipientInputChange;
  const handleClick = useCallback(async () => {
    const resolvedSelection = await resolveAddressInput(validatedInput.address, validatedInput.displayValue);
    handleRecipientSelection(resolvedSelection);
  }, [validatedInput, handleRecipientSelection]);
  const addressSelector = useMemo(() => {
    if (selectedRecipient.address || !validatedInput.address) {
      return null;
    }
    return /*#__PURE__*/jsx(SendAddressSelector, {
      address: validatedInput.address,
      senderChain: senderChain,
      onClick: handleClick,
      classNames: classNames?.selector
    });
  }, [selectedRecipient, validatedInput, senderChain, handleClick, classNames?.selector]);
  return /*#__PURE__*/jsxs("div", {
    children: [/*#__PURE__*/jsx(SendAddressInput, {
      selectedRecipient: selectedRecipient,
      recipientInput: recipientInput,
      setRecipientInput: setRecipientInput,
      setValidatedInput: setValidatedInput,
      handleRecipientInputChange: handleRecipientInputChange,
      classNames: classNames?.input
    }), addressSelector]
  });
}
export { SendAddressSelection };
//# sourceMappingURL=SendAddressSelection.js.map
