function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { RequestContext } from '../../../../core/network/constants.js';
import { useLifecycleStatus } from '../../../../internal/hooks/useLifecycleStatus.js';
import { usePriceQuote } from '../../../../internal/hooks/usePriceQuote.js';
import { useValue } from '../../../../internal/hooks/useValue.js';
import { isApiError } from '../../../../internal/utils/isApiResponseError.js';
import { truncateDecimalPlaces } from '../../../../internal/utils/truncateDecimalPlaces.js';
import { createContext, useContext, useState, useMemo, useEffect, useCallback } from 'react';
import { formatUnits } from 'viem';
import { usePortfolio } from '../../../hooks/usePortfolio.js';
import { useAccount } from 'wagmi';
import { jsx } from 'react/jsx-runtime';
const emptyContext = {};
const SendContext = /*#__PURE__*/createContext(emptyContext);
function useSendContext() {
  const sendContext = useContext(SendContext);
  if (sendContext === emptyContext) {
    throw new Error('useSendContext must be used within a SendProvider');
  }
  return sendContext;
}
function SendProvider({
  children
}) {
  // state for recipient address selection
  const _useState = useState({
      displayValue: '',
      address: null
    }),
    _useState2 = _slicedToArray(_useState, 2),
    selectedRecipient = _useState2[0],
    setSelectedRecipient = _useState2[1];

  // state for token selection
  const _useState3 = useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    selectedToken = _useState4[0],
    setSelectedToken = _useState4[1];
  const _useState5 = useState('crypto'),
    _useState6 = _slicedToArray(_useState5, 2),
    selectedInputType = _useState6[0],
    setSelectedInputType = _useState6[1];
  const _useState7 = useState(null),
    _useState8 = _slicedToArray(_useState7, 2),
    fiatAmount = _useState8[0],
    setFiatAmount = _useState8[1];
  const _useState9 = useState(null),
    _useState10 = _slicedToArray(_useState9, 2),
    cryptoAmount = _useState10[0],
    setCryptoAmount = _useState10[1];

  // lifecycle status
  const _useLifecycleStatus = useLifecycleStatus({
      statusName: 'init',
      statusData: {
        isMissingRequiredField: true
      }
    }),
    _useLifecycleStatus2 = _slicedToArray(_useLifecycleStatus, 2),
    lifecycleStatus = _useLifecycleStatus2[0],
    updateLifecycleStatus = _useLifecycleStatus2[1];
  const hasSufficientBalance = useMemo(() => {
    if (!selectedToken) {
      return false;
    }
    if (selectedInputType === 'fiat') {
      return Number(fiatAmount) <= selectedToken.fiatBalance;
    }
    return Number(cryptoAmount) <= Number(formatUnits(BigInt(selectedToken.cryptoBalance), selectedToken.decimals));
  }, [selectedInputType, selectedToken, cryptoAmount, fiatAmount]);

  // fetch & set ETH balance
  const _useAccount = useAccount(),
    address = _useAccount.address;
  const _usePortfolio = usePortfolio({
      address
    }, RequestContext.Wallet),
    portfolioData = _usePortfolio.data;
  const ethHolding = portfolioData?.tokenBalances?.find(token => token.address === '');
  const ethBalance = ethHolding ? Number(formatUnits(BigInt(ethHolding.cryptoBalance), ethHolding.decimals)) : 0;
  const isInitialized = ethBalance !== undefined;
  useEffect(() => {
    if (!ethBalance || ethBalance === 0) {
      updateLifecycleStatus({
        statusName: 'fundingWallet',
        statusData: {
          isMissingRequiredField: true
        }
      });
      return;
    }
    updateLifecycleStatus({
      statusName: 'selectingAddress',
      statusData: {
        isMissingRequiredField: true
      }
    });
  }, [ethBalance, updateLifecycleStatus]);

  // fetch & set exchange rate
  const _usePriceQuote = usePriceQuote({
      token: selectedToken?.address === '' ? 'ETH' : selectedToken?.address
    }, RequestContext.Wallet),
    exchangeRateLoading = _usePriceQuote.isLoading,
    exchangeRateData = _usePriceQuote.data;
  const exchangeRate = useMemo(() => {
    if (!exchangeRateData || isApiError(exchangeRateData) || exchangeRateData.priceQuotes.length === 0) {
      return 0;
    }
    return 1 / Number(exchangeRateData.priceQuotes[0].price);
  }, [exchangeRateData]);

  // handlers
  const handleRecipientInputChange = useCallback(() => {
    setSelectedRecipient({
      displayValue: '',
      address: null
    });
    updateLifecycleStatus({
      statusName: 'selectingAddress',
      statusData: {
        isMissingRequiredField: true
      }
    });
  }, [updateLifecycleStatus]);
  const handleAddressSelection = useCallback(async selection => {
    setSelectedRecipient(selection);
    updateLifecycleStatus({
      statusName: 'selectingToken',
      statusData: {
        isMissingRequiredField: true
      }
    });
  }, [updateLifecycleStatus]);
  const handleTokenSelection = useCallback(token => {
    setSelectedToken(token);
    updateLifecycleStatus({
      statusName: 'amountChange',
      statusData: {
        isMissingRequiredField: true,
        sufficientBalance: false
      }
    });
  }, [updateLifecycleStatus]);
  const handleResetTokenSelection = useCallback(() => {
    setSelectedToken(null);
    setFiatAmount(null);
    setCryptoAmount(null);
    updateLifecycleStatus({
      statusName: 'selectingToken',
      statusData: {
        isMissingRequiredField: true
      }
    });
  }, [updateLifecycleStatus]);
  const handleFiatAmountChange = useCallback(value => {
    setFiatAmount(value);
    updateLifecycleStatus({
      statusName: 'amountChange',
      statusData: {
        isMissingRequiredField: true,
        sufficientBalance: hasSufficientBalance
      }
    });
  }, [updateLifecycleStatus, hasSufficientBalance]);
  const handleCryptoAmountChange = useCallback(value => {
    const truncatedValue = truncateDecimalPlaces(value, 8);
    setCryptoAmount(truncatedValue);
    updateLifecycleStatus({
      statusName: 'amountChange',
      statusData: {
        isMissingRequiredField: true,
        sufficientBalance: hasSufficientBalance
      }
    });
  }, [updateLifecycleStatus, hasSufficientBalance]);
  const value = useValue({
    isInitialized,
    lifecycleStatus,
    updateLifecycleStatus,
    ethBalance,
    selectedRecipient,
    handleRecipientSelection: handleAddressSelection,
    selectedToken,
    handleRecipientInputChange,
    handleTokenSelection,
    handleResetTokenSelection,
    fiatAmount,
    handleFiatAmountChange,
    cryptoAmount,
    handleCryptoAmountChange,
    exchangeRate,
    exchangeRateLoading,
    selectedInputType,
    setSelectedInputType
  });
  return /*#__PURE__*/jsx(SendContext.Provider, {
    value: value,
    children: children
  });
}
export { SendProvider, useSendContext };
//# sourceMappingURL=SendProvider.js.map
