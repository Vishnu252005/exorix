import { BottomSheet } from '../../internal/components/BottomSheet.js';
import { zIndex } from '../../styles/constants.js';
import { cn, text, background, border } from '../../styles/theme.js';
import { useCallback, useMemo } from 'react';
import { WALLET_ADVANCED_DEFAULT_SWAPPABLE_TOKENS } from '../constants.js';
import { WalletAdvancedQrReceive } from './WalletAdvancedQrReceive.js';
import { WalletAdvancedSwap } from './WalletAdvancedSwap.js';
import { useWalletContext } from './WalletProvider.js';
import { Send } from './wallet-advanced-send/components/Send.js';
import { RequestContext } from '../../core/network/constants.js';
import { usePortfolio } from '../hooks/usePortfolio.js';
import { useAccount } from 'wagmi';
import { jsx } from 'react/jsx-runtime';
function WalletDropdownContent({
  children,
  swappableTokens,
  classNames
}) {
  const _useWalletContext = useWalletContext(),
    isSubComponentOpen = _useWalletContext.isSubComponentOpen,
    setIsSubComponentOpen = _useWalletContext.setIsSubComponentOpen,
    isSubComponentClosing = _useWalletContext.isSubComponentClosing,
    setIsSubComponentClosing = _useWalletContext.setIsSubComponentClosing,
    connectRef = _useWalletContext.connectRef,
    breakpoint = _useWalletContext.breakpoint,
    activeFeature = _useWalletContext.activeFeature,
    animations = _useWalletContext.animations;
  const _useAccount = useAccount(),
    address = _useAccount.address;
  const _usePortfolio = usePortfolio({
      address,
      enabled: Boolean(activeFeature)
    }, RequestContext.Wallet),
    portfolioData = _usePortfolio.data;
  const tokenBalances = portfolioData?.tokenBalances;
  const handleBottomSheetClose = useCallback(() => {
    setIsSubComponentOpen(false);
  }, [setIsSubComponentOpen]);
  const handleAnimationEnd = useCallback(() => {
    if (isSubComponentClosing) {
      setIsSubComponentOpen(false);
      setIsSubComponentClosing(false);
    }
  }, [isSubComponentClosing, setIsSubComponentOpen, setIsSubComponentClosing]);
  const content = useMemo(() => {
    if (activeFeature === 'send') {
      return /*#__PURE__*/jsx(ContentWrapper, {
        children: /*#__PURE__*/jsx(Send, {
          className: "border-none"
        })
      });
    }
    if (activeFeature === 'qr') {
      return /*#__PURE__*/jsx(ContentWrapper, {
        children: /*#__PURE__*/jsx(WalletAdvancedQrReceive, {
          classNames: classNames?.qr
        })
      });
    }
    if (activeFeature === 'swap') {
      return /*#__PURE__*/jsx(ContentWrapper, {
        children: /*#__PURE__*/jsx(WalletAdvancedSwap, {
          title: /*#__PURE__*/jsx("div", {
            className: cn(text.headline, 'w-full text-center text-base'),
            children: "Swap"
          }),
          to: swappableTokens ?? WALLET_ADVANCED_DEFAULT_SWAPPABLE_TOKENS,
          from: tokenBalances?.map(token => ({
            address: token.address,
            chainId: token.chainId,
            symbol: token.symbol,
            decimals: token.decimals,
            image: token.image,
            name: token.name
          })) ?? [],
          classNames: classNames?.swap
        })
      });
    }
    return /*#__PURE__*/jsx(ContentWrapper, {
      children: children
    });
  }, [activeFeature, swappableTokens, tokenBalances, children, classNames]);
  if (breakpoint === 'sm') {
    return /*#__PURE__*/jsx(BottomSheet, {
      isOpen: isSubComponentOpen,
      triggerRef: connectRef,
      onClose: handleBottomSheetClose,
      className: classNames?.container,
      children: /*#__PURE__*/jsx("div", {
        className: "flex h-full w-full flex-col items-center justify-center",
        children: content
      })
    });
  }
  return /*#__PURE__*/jsx("div", {
    "data-testid": "ockWalletDropdownContent",
    className: cn(background.default, border.radius, border.lineDefault, zIndex.dropdown, 'my-1.5 h-auto w-full', 'flex justify-center',
    // ensure border radius is respected
    'overflow-hidden', animations.container, classNames?.container),
    onAnimationEnd: handleAnimationEnd,
    children: content
  });
}
function ContentWrapper({
  children,
  className
}) {
  return /*#__PURE__*/jsx("div", {
    className: cn('flex flex-col justify-between', 'min-w-80 max-h-120', className),
    children: children
  });
}
export { WalletDropdownContent };
//# sourceMappingURL=WalletDropdownContent.js.map
