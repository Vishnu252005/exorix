import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { useMemo } from 'react';
import { WagmiProvider } from 'wagmi';
import { coinbaseWallet } from 'wagmi/connectors';
import { createWagmiConfig } from './core/createWagmiConfig.js';
import { useProviderDependencies } from './internal/hooks/useProviderDependencies.js';
import { jsx } from 'react/jsx-runtime';
function DefaultOnchainKitProviders({
  apiKey,
  appName,
  appLogoUrl,
  connectors = [coinbaseWallet({
    appName,
    appLogoUrl,
    preference: 'all'
  })],
  children
}) {
  // Check the React context for WagmiProvider and QueryClientProvider
  const _useProviderDependenc = useProviderDependencies(),
    providedWagmiConfig = _useProviderDependenc.providedWagmiConfig,
    providedQueryClient = _useProviderDependenc.providedQueryClient;
  const defaultConfig = useMemo(() => {
    // IMPORTANT: Don't create a new Wagmi configuration if one already exists
    // This prevents the user-provided WagmiConfig from being overridden
    return providedWagmiConfig || createWagmiConfig({
      apiKey,
      appName,
      appLogoUrl,
      connectors
    });
  }, [apiKey, appName, appLogoUrl, connectors, providedWagmiConfig]);
  const defaultQueryClient = useMemo(() => {
    // IMPORTANT: Don't create a new QueryClient if one already exists
    // This prevents the user-provided QueryClient from being overridden
    return providedQueryClient || new QueryClient();
  }, [providedQueryClient]);

  // If both dependencies are missing, return a context with default parent providers
  // If only one dependency is provided, expect the user to also provide the missing one
  if (!providedWagmiConfig && !providedQueryClient) {
    return /*#__PURE__*/jsx(WagmiProvider, {
      config: defaultConfig,
      children: /*#__PURE__*/jsx(QueryClientProvider, {
        client: defaultQueryClient,
        children: children
      })
    });
  }
  return children;
}
export { DefaultOnchainKitProviders };
//# sourceMappingURL=DefaultOnchainKitProviders.js.map
