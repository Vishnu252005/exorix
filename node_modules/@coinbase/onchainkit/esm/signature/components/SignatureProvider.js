function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { useLifecycleStatus } from '../../internal/hooks/useLifecycleStatus.js';
import { useValue } from '../../internal/hooks/useValue.js';
import { GENERIC_ERROR_MESSAGE } from '../../transaction/constants.js';
import { isUserRejectedRequestError } from '../../transaction/utils/isUserRejectedRequestError.js';
import { createContext, useContext, useEffect } from 'react';
import { useSignTypedData, useSignMessage } from 'wagmi';
import { MessageType } from '../types.js';
import { validateMessage } from '../utils/validateMessage.js';
import { jsx } from 'react/jsx-runtime';
const EMPTY_CONTEXT = {};
const SignatureContext = /*#__PURE__*/createContext(EMPTY_CONTEXT);
function useSignatureContext() {
  const context = useContext(SignatureContext);
  if (context === EMPTY_CONTEXT) {
    throw new Error('useSignatureContext must be used within a SignatureProvider');
  }
  return context;
}
function SignatureProvider({
  children,
  onSuccess,
  onError,
  onStatus,
  domain,
  types,
  message,
  primaryType,
  resetAfter
}) {
  const _useSignTypedData = useSignTypedData(),
    signTypedDataAsync = _useSignTypedData.signTypedDataAsync,
    resetSignTypedData = _useSignTypedData.reset;
  const _useSignMessage = useSignMessage(),
    signMessageAsync = _useSignMessage.signMessageAsync,
    resetSignMessage = _useSignMessage.reset;
  const _useLifecycleStatus = useLifecycleStatus({
      statusName: 'init',
      statusData: null
    }),
    _useLifecycleStatus2 = _slicedToArray(_useLifecycleStatus, 2),
    lifecycleStatus = _useLifecycleStatus2[0],
    updateLifecycleStatus = _useLifecycleStatus2[1];
  useEffect(() => {
    onStatus?.(lifecycleStatus);
  }, [lifecycleStatus, onStatus]);
  useEffect(() => {
    if (lifecycleStatus.statusName === 'success' && resetAfter) {
      setTimeout(() => {
        resetSignMessage();
        resetSignTypedData();
        updateLifecycleStatus({
          statusName: 'init',
          statusData: null
        });
      }, resetAfter);
    }
  }, [updateLifecycleStatus, lifecycleStatus, resetAfter, resetSignMessage, resetSignTypedData]);
  async function handleSignTypedData({
    domain,
    types,
    message,
    primaryType
  }) {
    const signature = await signTypedDataAsync({
      domain,
      types,
      message,
      primaryType
    });
    updateLifecycleStatus({
      statusName: 'success',
      statusData: {
        signature
      }
    });
    onSuccess?.(signature);
  }
  async function handleSignMessage({
    message
  }) {
    const signature = await signMessageAsync({
      message
    });
    updateLifecycleStatus({
      statusName: 'success',
      statusData: {
        signature
      }
    });
    onSuccess?.(signature);
  }
  function handleError(err) {
    const errorMessage = isUserRejectedRequestError(err) ? 'Request denied.' : GENERIC_ERROR_MESSAGE;
    updateLifecycleStatus({
      statusName: 'error',
      statusData: {
        code: 'SmSPc01',
        // Signature module SignatureProvider component 01 error
        error: JSON.stringify(err),
        message: errorMessage
      }
    });
    onError?.(err);
  }
  async function handleSign() {
    updateLifecycleStatus({
      statusName: 'pending'
    });
    try {
      const validatedMessage = validateMessage({
        domain,
        types,
        message,
        primaryType
      });
      if (validatedMessage.type === MessageType.TYPED_DATA) {
        await handleSignTypedData(validatedMessage.data);
      } else if (validatedMessage.type === MessageType.SIGNABLE_MESSAGE) {
        await handleSignMessage(validatedMessage.data);
      } else if (validatedMessage.type === MessageType.INVALID) {
        throw new Error('Invalid message data');
      }
    } catch (err) {
      handleError(err);
    }
  }
  const value = useValue({
    lifecycleStatus,
    handleSign
  });
  return /*#__PURE__*/jsx(SignatureContext.Provider, {
    value: value,
    children: children
  });
}
export { SignatureProvider, useSignatureContext };
//# sourceMappingURL=SignatureProvider.js.map
