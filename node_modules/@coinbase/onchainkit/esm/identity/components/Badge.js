'use client';
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { useAttestations } from '../hooks/useAttestations.js';
import { badgeSvg } from '../../internal/svg/badgeSvg.js';
import { zIndex } from '../../styles/constants.js';
import { cn, background, border, pressable, text, color } from '../../styles/theme.js';
import { useState, useMemo } from 'react';
import { useOnchainKit } from '../../useOnchainKit.js';
import { useIdentityContext } from './IdentityProvider.js';
import { jsxs, jsx } from 'react/jsx-runtime';
/**
 * Badge component.
 */
function Badge({
  className,
  tooltip = false
}) {
  const _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    showTooltip = _useState2[0],
    setShowTooltip = _useState2[1];
  const _useIdentityContext = useIdentityContext(),
    address = _useIdentityContext.address,
    contextSchemaId = _useIdentityContext.schemaId;
  const _useOnchainKit = useOnchainKit(),
    chain = _useOnchainKit.chain,
    kitSchemaId = _useOnchainKit.schemaId;
  const attestations = useAttestations({
    address,
    chain,
    schemaId: tooltip ? contextSchemaId ?? kitSchemaId : null
  });
  // Get tooltip text from tooltip prop or attestation
  const displayText = useMemo(() => {
    if (!tooltip) {
      return null;
    }
    return typeof tooltip === 'string' ? tooltip : extractAttestationName(attestations[0]);
  }, [tooltip, attestations]);
  const badgeSize = '12px';
  return /*#__PURE__*/jsxs("div", {
    className: "relative inline-flex",
    "data-testid": "ockBadgeContainer",
    children: [/*#__PURE__*/jsx("span", _objectSpread(_objectSpread({
      className: cn(background.primary, border.default, border.radius, tooltip && 'cursor-pointer', className),
      style: {
        height: badgeSize,
        width: badgeSize,
        maxHeight: badgeSize,
        maxWidth: badgeSize
      },
      "data-testid": "ockBadge"
    }, tooltip && {
      onMouseEnter: () => setShowTooltip(true),
      onMouseLeave: () => setShowTooltip(false)
    }), {}, {
      children: badgeSvg
    })), showTooltip && tooltip && /*#__PURE__*/jsxs("div", {
      className: cn(border.radius, border.default, pressable.alternate, text.legal, color.foreground, zIndex.tooltip, '-translate-x-1/2 absolute bottom-full left-1/2 mb-1 transform', 'whitespace-nowrap px-1.5 py-0.5'),
      "data-testid": "ockBadgeTooltip",
      children: [displayText, /*#__PURE__*/jsx("div", {
        className: cn('-translate-x-1/2 absolute top-full left-1/2 transform')
      })]
    })]
  });
}
/**
 * Extracts the attestation name from an attestation object
 */
function extractAttestationName(attestation) {
  if (!attestation?.decodedDataJson) {
    return 'Verified';
  }
  try {
    const decodedData = JSON.parse(attestation.decodedDataJson);
    if (Array.isArray(decodedData) && decodedData[0]?.name) {
      return decodedData[0].name;
    }
    const value = Object.values(decodedData)[0];
    if (typeof value === 'string') {
      return value;
    }
    if (value && typeof value === 'object' && 'value' in value && typeof value.value === 'string') {
      return value.value;
    }
  } catch {
    // If parsing fails, return default
  }
  return 'Verified';
}
export { Badge };
//# sourceMappingURL=Badge.js.map
