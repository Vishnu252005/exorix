/**
 * Component-specific events
 */

/**
 * Wallet component events - Tracks all possible wallet interaction states
 * Used to monitor wallet connection flow and user interactions
 */
let WalletEvent = /*#__PURE__*/function (WalletEvent) {
  /** Wallet connection fails */
  WalletEvent["ConnectError"] = "walletConnectError";
  /** User clicks connect wallet button */
  WalletEvent["ConnectInitiated"] = "walletConnectInitiated";
  /** Wallet successfully connected */
  WalletEvent["ConnectSuccess"] = "walletConnectSuccess";
  /** User disconnects wallet */
  WalletEvent["Disconnect"] = "walletDisconnect";
  /** User selects a wallet option */
  WalletEvent["OptionSelected"] = "walletOptionSelected";
  /** User cancels wallet connection */
  WalletEvent["ConnectCanceled"] = "walletConnectCanceled";
  return WalletEvent;
}({});

/**
 * Wallet option - Available actions in the wallet interface
 * Used to track which wallet features users interact with
 */
let WalletOption = /*#__PURE__*/function (WalletOption) {
  WalletOption["Buy"] = "buy";
  WalletOption["Explorer"] = "explorer";
  WalletOption["QR"] = "qr";
  WalletOption["Refresh"] = "refresh";
  WalletOption["Send"] = "send";
  WalletOption["Swap"] = "swap";
  return WalletOption;
}({});

/**
 * Swap component events
 */
let SwapEvent = /*#__PURE__*/function (SwapEvent) {
  SwapEvent["SlippageChanged"] = "swapSlippageChanged";
  SwapEvent["TokenSelected"] = "swapTokenSelected";
  SwapEvent["SwapSuccess"] = "swapSuccess";
  SwapEvent["SwapInitiated"] = "swapInitiated";
  SwapEvent["SwapFailure"] = "swapFailure";
  SwapEvent["SwapCanceled"] = "swapCanceled";
  return SwapEvent;
}({});

/**
 * Buy option - Available payment methods for buying
 * Used to track which payment method users select
 */
let BuyOption = /*#__PURE__*/function (BuyOption) {
  BuyOption["APPLE_PAY"] = "apple_pay";
  BuyOption["COINBASE"] = "coinbase_account";
  BuyOption["DEBIT_CARD"] = "debit_card";
  BuyOption["ETH"] = "eth";
  BuyOption["USDC"] = "usdc";
  return BuyOption;
}({});

/**
 * Buy component events
 */
let BuyEvent = /*#__PURE__*/function (BuyEvent) {
  BuyEvent["BuyFailure"] = "buyFailure";
  BuyEvent["BuyInitiated"] = "buyInitiated";
  BuyEvent["BuyOptionSelected"] = "buyOptionSelected";
  BuyEvent["BuySuccess"] = "buySuccess";
  BuyEvent["BuyCanceled"] = "buyCanceled";
  return BuyEvent;
}({});

/**
 * Checkout component events
 */
let CheckoutEvent = /*#__PURE__*/function (CheckoutEvent) {
  CheckoutEvent["CheckoutFailure"] = "checkoutFailure";
  CheckoutEvent["CheckoutInitiated"] = "checkoutInitiated";
  CheckoutEvent["CheckoutSuccess"] = "checkoutSuccess";
  CheckoutEvent["CheckoutCanceled"] = "checkoutCanceled";
  return CheckoutEvent;
}({});

/**
 * Mint component events
 */
let MintEvent = /*#__PURE__*/function (MintEvent) {
  MintEvent["MintFailure"] = "mintFailure";
  MintEvent["MintInitiated"] = "mintInitiated";
  MintEvent["MintQuantityChanged"] = "mintQuantityChanged";
  MintEvent["MintSuccess"] = "mintSuccess";
  MintEvent["MintCanceled"] = "mintCanceled";
  return MintEvent;
}({});

/**
 * Transaction component events
 */
let TransactionEvent = /*#__PURE__*/function (TransactionEvent) {
  TransactionEvent["TransactionFailure"] = "transactionFailure";
  TransactionEvent["TransactionInitiated"] = "transactionInitiated";
  TransactionEvent["TransactionSuccess"] = "transactionSuccess";
  TransactionEvent["TransactionCanceled"] = "transactionCanceled";
  return TransactionEvent;
}({});

/**
 * Fund component events
 */
let FundEvent = /*#__PURE__*/function (FundEvent) {
  FundEvent["FundAmountChanged"] = "fundAmountChanged";
  FundEvent["FundFailure"] = "fundFailure";
  FundEvent["FundInitiated"] = "fundInitiated";
  FundEvent["FundOptionSelected"] = "fundOptionSelected";
  FundEvent["FundSuccess"] = "fundSuccess";
  FundEvent["FundCanceled"] = "fundCanceled";
  return FundEvent;
}({});

/**
 * Earn component events
 */
let EarnEvent = /*#__PURE__*/function (EarnEvent) {
  EarnEvent["EarnDepositInitiated"] = "earnDepositInitiated";
  EarnEvent["EarnDepositSuccess"] = "earnDepositSuccess";
  EarnEvent["EarnDepositFailure"] = "earnDepositFailure";
  EarnEvent["EarnDepositCanceled"] = "earnDepositCanceled";
  EarnEvent["EarnWithdrawInitiated"] = "earnWithdrawInitiated";
  EarnEvent["EarnWithdrawSuccess"] = "earnWithdrawSuccess";
  EarnEvent["EarnWithdrawFailure"] = "earnWithdrawFailure";
  EarnEvent["EarnWithdrawCanceled"] = "earnWithdrawCanceled";
  return EarnEvent;
}({});

/**
 * Appchain component events
 */
let AppchainEvent = /*#__PURE__*/function (AppchainEvent) {
  AppchainEvent["AppchainBridgeDepositInitiated"] = "appchainBridgeDepositInitiated";
  AppchainEvent["AppchainBridgeDepositSuccess"] = "appchainBridgeDepositSuccess";
  AppchainEvent["AppchainBridgeDepositFailure"] = "appchainBridgeDepositFailure";
  AppchainEvent["AppchainBridgeWithdrawInitiated"] = "appchainBridgeWithdrawInitiated";
  AppchainEvent["AppchainBridgeWithdrawSuccess"] = "appchainBridgeWithdrawSuccess";
  AppchainEvent["AppchainBridgeWithdrawFailure"] = "appchainBridgeWithdrawFailure";
  AppchainEvent["AppchainBridgeWaitForClaimFailure"] = "appchainBridgeWaitForClaimFailure";
  AppchainEvent["AppchainBridgeClaimSuccess"] = "appchainBridgeClaimSuccess";
  AppchainEvent["AppchainBridgeClaimFailure"] = "appchainBridgeClaimFailure";
  return AppchainEvent;
}({});

/**
 * Generic error events across components
 * Used for error tracking and monitoring
 */
let ErrorEvent = /*#__PURE__*/function (ErrorEvent) {
  ErrorEvent["ComponentError"] = "componentError";
  return ErrorEvent;
}({});

/**
 * Analytics event types
 * Combines all possible event types
 */

/**
 * Common analytics data included in all events
 * Provides basic context for every tracked event
 */

/**
 * Checkout component events data
 */

/**
 * Mint component events data
 */

/**
 * Transaction component events data
 */

/**
 * Fund component events data
 */

/**
 * Earn component events data
 */

// Update main AnalyticsEventData type to include all component events

export { AppchainEvent, BuyEvent, BuyOption, CheckoutEvent, EarnEvent, ErrorEvent, FundEvent, MintEvent, SwapEvent, TransactionEvent, WalletEvent, WalletOption };
//# sourceMappingURL=types.js.map
