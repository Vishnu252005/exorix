'use client';
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { useAnalytics } from '../../../core/analytics/hooks/useAnalytics.js';
import { AppchainEvent } from '../../../core/analytics/types.js';
import { useState, useCallback } from 'react';
import { parseEther, parseUnits } from 'viem';
import { useWriteContract, useSwitchChain, useAccount, useConfig } from 'wagmi';
import { waitForTransactionReceipt } from 'wagmi/actions';
import { StandardBridgeABI, ERC20ABI, OptimismPortalABI } from '../abi.js';
import { MIN_GAS_LIMIT, EXTRA_DATA } from '../constants.js';
import { isUserRejectedRequestError } from '../utils/isUserRejectedRequestError.js';
function useDeposit() {
  const _useWriteContract = useWriteContract(),
    writeContractAsync = _useWriteContract.writeContractAsync,
    data = _useWriteContract.data;
  const _useSwitchChain = useSwitchChain(),
    switchChainAsync = _useSwitchChain.switchChainAsync;
  const _useAccount = useAccount(),
    chainId = _useAccount.chainId;
  const wagmiConfig = useConfig();
  const _useState = useState('idle'),
    _useState2 = _slicedToArray(_useState, 2),
    status = _useState2[0],
    setStatus = _useState2[1];
  const _useAnalytics = useAnalytics(),
    sendAnalytics = _useAnalytics.sendAnalytics;
  const resetDepositStatus = useCallback(() => {
    setStatus('idle');
  }, []);
  const deposit = async ({
    config,
    from,
    bridgeParams
  }) => {
    if (!bridgeParams.recipient) {
      throw new Error('Recipient is required');
    }
    if (chainId !== from.id) {
      await switchChainAsync({
        chainId: from.id
      });
    }
    sendAnalytics(AppchainEvent.AppchainBridgeDepositInitiated, {
      amount: bridgeParams.amount,
      tokenAddress: bridgeParams.token.address,
      recipient: bridgeParams.recipient
    });
    setStatus('depositPending');
    try {
      // Native ETH
      if (bridgeParams.token.address === '') {
        const txHash = await writeContractAsync({
          abi: StandardBridgeABI,
          functionName: 'bridgeETHTo',
          args: [bridgeParams.recipient, MIN_GAS_LIMIT, EXTRA_DATA],
          address: config.contracts.l1StandardBridge,
          value: parseEther(bridgeParams.amount),
          chainId: from.id
        });
        await waitForTransactionReceipt(wagmiConfig, {
          hash: txHash,
          confirmations: 1,
          chainId: from.id
        });
      } else {
        // ERC20
        if (!bridgeParams.token.remoteToken) {
          throw new Error('Remote token address is required for ERC-20 tokens');
        }
        const formattedAmount = parseUnits(bridgeParams.amount, bridgeParams.token.decimals);
        // Bridge address is OptimismPortal for depositing custom gas tokens
        const bridgeAddress = bridgeParams.token.isCustomGasToken ? config.contracts.optimismPortal : config.contracts.l1StandardBridge;
        // Approve the L1StandardBridge to spend tokens
        const approveTx = await writeContractAsync({
          abi: ERC20ABI,
          functionName: 'approve',
          args: [bridgeAddress, formattedAmount],
          address: bridgeParams.token.address
        });
        await waitForTransactionReceipt(wagmiConfig, {
          hash: approveTx,
          confirmations: 1,
          chainId: from.id
        });
        let bridgeTxHash;
        // Bridge the tokens
        if (bridgeParams.token.isCustomGasToken) {
          bridgeTxHash = await writeContractAsync({
            abi: OptimismPortalABI,
            functionName: 'depositERC20Transaction',
            args: [bridgeParams.recipient, formattedAmount, formattedAmount, BigInt(MIN_GAS_LIMIT), false, EXTRA_DATA],
            address: bridgeAddress
          });
        } else {
          bridgeTxHash = await writeContractAsync({
            abi: StandardBridgeABI,
            functionName: 'bridgeERC20To',
            args: [bridgeParams.token.address, bridgeParams.token.remoteToken,
            // TODO: manually calculate the salted address
            bridgeParams.recipient, formattedAmount, MIN_GAS_LIMIT, EXTRA_DATA],
            address: bridgeAddress
          });
        }
        await waitForTransactionReceipt(wagmiConfig, {
          hash: bridgeTxHash,
          confirmations: 1,
          chainId: from.id
        });
      }
      sendAnalytics(AppchainEvent.AppchainBridgeDepositSuccess, {
        amount: bridgeParams.amount,
        tokenAddress: bridgeParams.token.address,
        recipient: bridgeParams.recipient
      });
      setStatus('depositSuccess');
    } catch (error) {
      if (isUserRejectedRequestError(error)) {
        console.error('User rejected request');
        setStatus('depositRejected');
      } else {
        setStatus('error');
        sendAnalytics(AppchainEvent.AppchainBridgeDepositFailure, {
          error: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }
  };
  return {
    deposit,
    depositStatus: status,
    transactionHash: data,
    resetDepositStatus
  };
}
export { useDeposit };
//# sourceMappingURL=useDeposit.js.map
