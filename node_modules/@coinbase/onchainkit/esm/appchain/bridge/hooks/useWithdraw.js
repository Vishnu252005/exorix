'use client';
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { useAnalytics } from '../../../core/analytics/hooks/useAnalytics.js';
import { AppchainEvent } from '../../../core/analytics/types.js';
import { useState, useCallback } from 'react';
import { parseEther, parseUnits, erc20Abi, keccak256 } from 'viem';
import { getWithdrawals, getWithdrawalHashStorageSlot } from 'viem/op-stack';
import { useAccount, useSwitchChain, useWriteContract, useConfig } from 'wagmi';
import { waitForTransactionReceipt, readContract, getProof, getBlock } from 'wagmi/actions';
import { L2_TO_L1_MESSAGE_PASSER_ABI, StandardBridgeABI, L2OutputOracleABI, OptimismPortalABI } from '../abi.js';
import { APPCHAIN_L2_TO_L1_MESSAGE_PASSER_ADDRESS, EXTRA_DATA, MIN_GAS_LIMIT, APPCHAIN_BRIDGE_ADDRESS, OUTPUT_ROOT_PROOF_VERSION } from '../constants.js';
import { getOutput } from '../utils/getOutput.js';
import { isUserRejectedRequestError } from '../utils/isUserRejectedRequestError.js';
import { maybeAddProofNode } from '../utils/maybeAddProofNode.js';
const useWithdraw = ({
  config,
  chain,
  bridgeParams
}) => {
  const _useAccount = useAccount(),
    chainId = _useAccount.chainId;
  const _useSwitchChain = useSwitchChain(),
    switchChainAsync = _useSwitchChain.switchChainAsync;
  const _useWriteContract = useWriteContract(),
    writeContractAsync = _useWriteContract.writeContractAsync,
    data = _useWriteContract.data;
  const wagmiConfig = useConfig();
  const _useState = useState('idle'),
    _useState2 = _slicedToArray(_useState, 2),
    withdrawStatus = _useState2[0],
    setWithdrawStatus = _useState2[1];
  const _useState3 = useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    withdrawal = _useState4[0],
    setWithdrawal = _useState4[1];
  const _useState5 = useState(undefined),
    _useState6 = _slicedToArray(_useState5, 2),
    finalizedWithdrawalTxHash = _useState6[0],
    setFinalizedWithdrawalTxHash = _useState6[1];
  const _useAnalytics = useAnalytics(),
    sendAnalytics = _useAnalytics.sendAnalytics;
  const resetWithdrawStatus = useCallback(() => {
    setWithdrawStatus('idle');
    setWithdrawal(null);
  }, []);
  const withdraw = async () => {
    if (!bridgeParams.recipient) {
      throw new Error('Recipient is required');
    }
    sendAnalytics(AppchainEvent.AppchainBridgeWithdrawInitiated, {
      amount: bridgeParams.amount,
      tokenAddress: bridgeParams.token.address,
      recipient: bridgeParams.recipient
    });
    setWithdrawStatus('withdrawPending');
    try {
      // Switch networks to the appchain
      if (chainId !== config.chainId) {
        await switchChainAsync({
          chainId: config.chainId
        });
      }
      let transactionHash = '0x';
      // Custom gas token
      if (bridgeParams.token.isCustomGasToken) {
        transactionHash = await writeContractAsync({
          abi: L2_TO_L1_MESSAGE_PASSER_ABI,
          functionName: 'initiateWithdrawal',
          args: [bridgeParams.recipient, BigInt(MIN_GAS_LIMIT), EXTRA_DATA],
          address: APPCHAIN_L2_TO_L1_MESSAGE_PASSER_ADDRESS,
          chainId: config.chainId,
          value: parseEther(bridgeParams.amount)
        });
      } else if (bridgeParams.token.address === '') {
        // Native ETH
        transactionHash = await writeContractAsync({
          abi: StandardBridgeABI,
          functionName: 'bridgeETHTo',
          args: [bridgeParams.recipient, MIN_GAS_LIMIT, EXTRA_DATA],
          address: APPCHAIN_BRIDGE_ADDRESS,
          value: parseEther(bridgeParams.amount),
          chainId: config.chainId
        });
      } else {
        // ERC-20
        if (!bridgeParams.token.remoteToken) {
          throw new Error('Remote token is required');
        }
        const formattedAmount = parseUnits(bridgeParams.amount, bridgeParams.token.decimals);
        const approveTx = await writeContractAsync({
          abi: erc20Abi,
          functionName: 'approve',
          args: [APPCHAIN_BRIDGE_ADDRESS, formattedAmount],
          address: bridgeParams.token.address,
          chainId: config.chainId
        });
        await waitForTransactionReceipt(wagmiConfig, {
          hash: approveTx,
          confirmations: 1
        });
        transactionHash = await writeContractAsync({
          abi: StandardBridgeABI,
          functionName: 'bridgeERC20To',
          args: [bridgeParams.token.remoteToken, bridgeParams.token.address, bridgeParams.recipient, formattedAmount, MIN_GAS_LIMIT, EXTRA_DATA],
          address: APPCHAIN_BRIDGE_ADDRESS,
          chainId: config.chainId
        });
      }
      sendAnalytics(AppchainEvent.AppchainBridgeWithdrawSuccess, {
        amount: bridgeParams.amount,
        tokenAddress: bridgeParams.token.address,
        recipient: bridgeParams.recipient
      });
      setWithdrawStatus('withdrawSuccess');
      return transactionHash;
    } catch (error) {
      if (isUserRejectedRequestError(error)) {
        console.error('User rejected request');
        setWithdrawStatus('withdrawRejected');
      } else {
        console.error('Error', error);
        setWithdrawStatus('error');
        /* v8 ignore next 3 */
        sendAnalytics(AppchainEvent.AppchainBridgeWithdrawFailure, {
          error: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }
  };
  const waitForWithdrawal = async txHash => {
    const hash = txHash || data;
    if (!hash) {
      return;
    }
    const withdrawalReceipt = await waitForTransactionReceipt(wagmiConfig, {
      // By default, use the withdrawal hash from Wagmi hook
      // If the user has resumed a withdrawal transaction, use the txHash provided
      hash,
      confirmations: 1,
      chainId: config.chainId
    });
    // Poll until the required block number is reached
    const pollInterval = 1000; // 1 second
    const maxAttempts = 60; // Prevent infinite polling, poll for maximum 1 minute
    let attempts = 0;
    while (attempts < maxAttempts) {
      const latestBlockNumber = await readContract(wagmiConfig, {
        address: config.contracts.l2OutputOracle,
        abi: L2OutputOracleABI,
        functionName: 'latestBlockNumber',
        chainId: chain.id
      });
      if (latestBlockNumber >= withdrawalReceipt.blockNumber) {
        setWithdrawStatus('claimReady');
        const _getWithdrawals = getWithdrawals(withdrawalReceipt),
          _getWithdrawals2 = _slicedToArray(_getWithdrawals, 1),
          _withdrawal = _getWithdrawals2[0];
        setWithdrawal([_withdrawal]);
        return;
      }
      await new Promise(resolve => setTimeout(resolve, pollInterval));
      attempts++;
      /* v8 ignore start */
    }
    sendAnalytics(AppchainEvent.AppchainBridgeWaitForClaimFailure, {
      transactionHash: txHash || data || '0x'
    });
    /* v8 ignore stop */
  };
  /* v8 ignore start */
  const proveAndFinalizeWithdrawal = async () => {
    if (!withdrawal || withdrawal.length === 0) {
      console.error('no withdrawals to prove');
      return;
    }
    setWithdrawStatus('claimPending');
    // Build proof
    const output = await getOutput({
      config,
      chain,
      wagmiConfig
    });
    const slot = getWithdrawalHashStorageSlot({
      withdrawalHash: withdrawal[0].withdrawalHash
    });
    const _await$Promise$all = await Promise.all([
      // On the L2ToL1MessagePasser on the appchain
      getProof(wagmiConfig, {
        address: APPCHAIN_L2_TO_L1_MESSAGE_PASSER_ADDRESS,
        storageKeys: [slot],
        blockNumber: output.l2BlockNumber,
        chainId: config.chainId
      }), getBlock(wagmiConfig, {
        blockNumber: output.l2BlockNumber,
        chainId: config.chainId
      })]),
      _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2),
      proof = _await$Promise$all2[0],
      block = _await$Promise$all2[1];
    const args = {
      l2OutputIndex: output.outputIndex,
      outputRootProof: {
        version: OUTPUT_ROOT_PROOF_VERSION,
        stateRoot: block.stateRoot,
        messagePasserStorageRoot: proof.storageHash,
        latestBlockhash: block.hash
      },
      withdrawalProof: maybeAddProofNode(keccak256(slot), proof.storageProof[0].proof),
      withdrawal: withdrawal[0]
    };
    try {
      // Switch networks to Base
      if (chainId !== chain.id) {
        await switchChainAsync({
          chainId: chain.id
        });
      }
      // Finalize the withdrawal
      const _finalizedWithdrawalTxHash = await writeContractAsync({
        abi: OptimismPortalABI,
        address: config.contracts.optimismPortal,
        functionName: 'proveAndFinalizeWithdrawalTransaction',
        args: [withdrawal[0], args.l2OutputIndex, args.outputRootProof, args.withdrawalProof],
        chainId: chain.id
      });
      await waitForTransactionReceipt(wagmiConfig, {
        hash: _finalizedWithdrawalTxHash,
        confirmations: 1,
        chainId: chain.id
      });
      setFinalizedWithdrawalTxHash(_finalizedWithdrawalTxHash);
      setWithdrawStatus('claimSuccess');
      sendAnalytics(AppchainEvent.AppchainBridgeClaimSuccess, {
        amount: bridgeParams.amount,
        tokenAddress: bridgeParams.token.address
      });
    } catch (error) {
      if (isUserRejectedRequestError(error)) {
        console.error('User rejected request');
        setWithdrawStatus('claimRejected');
      } else {
        setWithdrawStatus('error');
        sendAnalytics(AppchainEvent.AppchainBridgeClaimFailure, {
          error: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }
  };
  /* v8 ignore stop */
  return {
    withdraw,
    withdrawStatus,
    waitForWithdrawal,
    proveAndFinalizeWithdrawal,
    finalizedWithdrawalTxHash,
    resetWithdrawStatus
  };
};
export { useWithdraw };
//# sourceMappingURL=useWithdraw.js.map
