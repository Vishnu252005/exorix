'use client';
import { Spinner } from '../../../internal/components/Spinner.js';
import { ErrorSvg } from '../../../internal/svg/fullWidthErrorSvg.js';
import { SuccessSvg } from '../../../internal/svg/fullWidthSuccessSvg.js';
import { cn, pressable, border, text, color } from '../../../styles/theme.js';
import { useEffect } from 'react';
import { useWithdrawButton } from '../hooks/useWithdrawButton.js';
import { useAppchainBridgeContext } from './AppchainBridgeProvider.js';
import { jsxs, jsx } from 'react/jsx-runtime';
const buttonStyles = cn(pressable.primary, border.radius, 'w-full rounded-xl', 'px-4 py-3 font-medium text-base text-white leading-6', text.headline);
const AppchainBridgeWithdraw = () => {
  const _useAppchainBridgeCon = useAppchainBridgeContext(),
    withdrawStatus = _useAppchainBridgeCon.withdrawStatus,
    waitForWithdrawal = _useAppchainBridgeCon.waitForWithdrawal,
    resumeWithdrawalTxHash = _useAppchainBridgeCon.resumeWithdrawalTxHash,
    handleResetState = _useAppchainBridgeCon.handleResetState;
  const _useWithdrawButton = useWithdrawButton({
      withdrawStatus
    }),
    shouldShowClaim = _useWithdrawButton.shouldShowClaim,
    label = _useWithdrawButton.label,
    isError = _useWithdrawButton.isError,
    isPending = _useWithdrawButton.isPending;
  useEffect(() => {
    (async () => {
      if (withdrawStatus === 'withdrawSuccess') {
        // If appchain withdrawal is successful, wait for claim to be ready
        waitForWithdrawal();
      }
      if (resumeWithdrawalTxHash) {
        // If the user has resumed a withdrawal transaction, wait for claim to be ready
        waitForWithdrawal(resumeWithdrawalTxHash);
      }
    })();
  }, [withdrawStatus, waitForWithdrawal, resumeWithdrawalTxHash]);
  return /*#__PURE__*/jsxs("div", {
    className: "flex h-full w-full flex-col justify-between",
    children: [/*#__PURE__*/jsx("div", {
      children: /*#__PURE__*/jsx("div", {
        className: "flex items-center",
        children: /*#__PURE__*/jsx("h2", {
          className: "ock-text-foreground flex-1 text-center font-medium text-lg",
          children: label
        })
      })
    }), /*#__PURE__*/jsxs("div", {
      className: "mt-16 px-4 pb-4",
      children: [isError && /*#__PURE__*/jsx(ErrorContent, {
        onBack: handleResetState
      }), isPending && /*#__PURE__*/jsx(LoadingContent, {}), shouldShowClaim && /*#__PURE__*/jsx(ClaimContent, {}), withdrawStatus === 'claimRejected' && /*#__PURE__*/jsx("div", {
        className: cn(text.label2, color.error, 'mt-2'),
        children: "Transaction denied"
      })]
    })]
  });
};
function LoadingContent() {
  return /*#__PURE__*/jsxs("div", {
    className: "flex h-full flex-col items-center justify-center gap-16",
    children: [/*#__PURE__*/jsx(Spinner, {
      className: "!border-t-[var(--ock-bg-primary)] h-24 w-24"
    }), /*#__PURE__*/jsxs("span", {
      className: "px-4 text-center font-medium text-base",
      children: ["Waiting for claim to be ready...", /*#__PURE__*/jsx("br", {}), "Please do not close this window."]
    })]
  });
}
function ErrorContent({
  onBack
}) {
  return /*#__PURE__*/jsxs("div", {
    className: "flex flex-col items-center gap-16",
    children: [/*#__PURE__*/jsx("div", {
      className: "flex justify-center",
      children: /*#__PURE__*/jsx("div", {
        className: "h-20 w-20",
        children: /*#__PURE__*/jsx(ErrorSvg, {
          fill: "var(--ock-bg-error)"
        })
      })
    }), /*#__PURE__*/jsxs("div", {
      className: "flex flex-col items-center gap-4",
      children: [/*#__PURE__*/jsxs("span", {
        className: "px-4 text-center font-medium text-base",
        children: ["There was an error processing your withdrawal.", /*#__PURE__*/jsx("br", {}), "If the issue persists, please contact support."]
      }), /*#__PURE__*/jsx("button", {
        onClick: onBack,
        className: buttonStyles,
        type: "button",
        children: /*#__PURE__*/jsx("div", {
          className: cn(text.headline, color.inverse, 'flex justify-center'),
          children: "Back to bridge"
        })
      })]
    })]
  });
}
function ClaimContent() {
  const _useAppchainBridgeCon2 = useAppchainBridgeContext(),
    withdrawStatus = _useAppchainBridgeCon2.withdrawStatus,
    proveAndFinalizeWithdrawal = _useAppchainBridgeCon2.proveAndFinalizeWithdrawal;
  const _useWithdrawButton2 = useWithdrawButton({
      withdrawStatus
    }),
    buttonDisabled = _useWithdrawButton2.buttonDisabled,
    buttonContent = _useWithdrawButton2.buttonContent;
  return /*#__PURE__*/jsxs("div", {
    className: "flex flex-col items-center gap-16",
    children: [/*#__PURE__*/jsx("div", {
      className: "flex justify-center",
      children: /*#__PURE__*/jsx("div", {
        className: "h-20 w-20",
        children: /*#__PURE__*/jsx(SuccessSvg, {
          fill: "var(--ock-bg-primary)"
        })
      })
    }), /*#__PURE__*/jsx("button", {
      onClick: proveAndFinalizeWithdrawal,
      className: cn(buttonStyles, buttonDisabled && pressable.disabled),
      type: "button",
      children: /*#__PURE__*/jsx("div", {
        className: cn(text.headline, color.inverse, 'flex justify-center'),
        children: buttonContent
      })
    })]
  });
}
export { AppchainBridgeWithdraw };
//# sourceMappingURL=AppchainBridgeWithdraw.js.map
