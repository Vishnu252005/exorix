'use client';
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import '../../../identity/index.js';
import { useState, useMemo } from 'react';
import { useAccount } from 'wagmi';
import { TextInput } from '../../../internal/components/TextInput.js';
import { isValidAmount } from '../../../internal/utils/isValidAmount.js';
import { cn, text, color, background, border } from '../../../styles/theme.js';
import '../../../token/index.js';
import { useAppchainBridgeContext } from './AppchainBridgeProvider.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { Address } from '../../../identity/components/Address.js';
import { TokenSelectDropdown } from '../../../token/components/TokenSelectDropdown.js';
function AppchainBridgeInput({
  className,
  delayMs = 50
}) {
  const _useAppchainBridgeCon = useAppchainBridgeContext(),
    balance = _useAppchainBridgeCon.balance,
    bridgeParams = _useAppchainBridgeCon.bridgeParams,
    bridgeableTokens = _useAppchainBridgeCon.bridgeableTokens,
    to = _useAppchainBridgeCon.to,
    isPriceLoading = _useAppchainBridgeCon.isPriceLoading,
    handleAmountChange = _useAppchainBridgeCon.handleAmountChange,
    setIsAddressModalOpen = _useAppchainBridgeCon.setIsAddressModalOpen,
    resetDepositStatus = _useAppchainBridgeCon.resetDepositStatus;
  const _useState = useState(bridgeableTokens[0]),
    _useState2 = _slicedToArray(_useState, 2),
    currentToken = _useState2[0],
    setCurrentToken = _useState2[1];
  const _useAccount = useAccount(),
    address = _useAccount.address;
  const insufficientBalance = useMemo(() => {
    return balance && Number(balance) < Number(bridgeParams.amount);
  }, [balance, bridgeParams.amount]);
  const label = useMemo(() => {
    if (insufficientBalance) {
      return 'Insufficient funds';
    }
    if (isPriceLoading) {
      return /*#__PURE__*/jsx("div", {
        className: "h-4 w-16 animate-pulse rounded bg-gray-200 dark:bg-gray-700"
      });
    }
    if (bridgeParams.amountUSD === 'NaN') {
      return '';
    }
    return `~$${bridgeParams.amountUSD}`;
  }, [insufficientBalance, isPriceLoading, bridgeParams.amountUSD]);
  return /*#__PURE__*/jsxs("div", {
    className: cn(background.secondary, border.radius, 'box-border flex h-[148px] w-full flex-col items-start p-4', className),
    "data-testid": "ockBridgeAmountInput_Container",
    children: [/*#__PURE__*/jsx("div", {
      className: "flex w-full items-center justify-between",
      children: /*#__PURE__*/jsxs("span", {
        className: cn(text.label2, color.foregroundMuted, 'flex items-center gap-1'),
        children: ["Send to", ' ', /*#__PURE__*/jsx("button", {
          type: "button",
          className: cn('cursor-pointer hover:underline focus:outline-none', text.label2),
          onClick: () => {
            setIsAddressModalOpen(true);
          },
          title: bridgeParams.recipient,
          children: /*#__PURE__*/jsx(Address, {
            address: bridgeParams.recipient || '0x0000000000000000000000000000000000000000',
            hasCopyAddressOnClick: false,
            className: cn(text.label2, '!text-[var(--ock-text-foreground)]')
          })
        }), ' ', "on ", /*#__PURE__*/jsx("span", {
          className: "inline-flex h-4 w-4 items-center",
          children: to.icon
        })]
      })
    }), /*#__PURE__*/jsxs("div", {
      className: "flex w-full items-center justify-between",
      children: [/*#__PURE__*/jsx(TextInput, {
        className: cn('mr-2 w-full border-[none] bg-transparent font-display text-[2.5rem]', 'leading-none outline-none', color.foreground, insufficientBalance && color.error),
        placeholder: "0.00",
        delayMs: delayMs,
        inputValidator: isValidAmount,
        onChange: value => {
          handleAmountChange({
            amount: value,
            token: currentToken
          });
        },
        value: bridgeParams.amount
      }), /*#__PURE__*/jsx(TokenSelectDropdown, {
        token: currentToken,
        options: bridgeableTokens,
        setToken: token => {
          handleAmountChange({
            amount: bridgeParams.amount,
            token: token
          });
          resetDepositStatus();
          setCurrentToken(token);
        }
      })]
    }), /*#__PURE__*/jsxs("div", {
      className: "mt-4 flex w-full justify-between",
      children: [/*#__PURE__*/jsx("div", {
        className: "flex items-center",
        children: /*#__PURE__*/jsx("span", {
          className: cn(text.label2, color.foregroundMuted, insufficientBalance && color.error),
          children: label
        })
      }), address && /*#__PURE__*/jsxs("div", {
        className: "flex items-center",
        children: [/*#__PURE__*/jsx("span", {
          className: cn(text.label2, color.foregroundMuted),
          children: `Balance: ${Number(balance).toLocaleString(undefined, {
            maximumFractionDigits: 5,
            minimumFractionDigits: 0
          })}`
        }), /*#__PURE__*/jsx("button", {
          type: "button",
          className: "flex cursor-pointer items-center justify-center px-2 py-1",
          "data-testid": "ockBridgeAmountInput_MaxButton",
          onClick: () => {
            handleAmountChange({
              amount: balance,
              token: bridgeParams.token
            });
          },
          children: /*#__PURE__*/jsx("span", {
            className: cn(text.label1, color.primary),
            children: "Max"
          })
        })]
      })]
    })]
  });
}
export { AppchainBridgeInput };
//# sourceMappingURL=AppchainBridgeInput.js.map
