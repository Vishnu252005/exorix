'use client';
import { cn, text, color, pressable, border } from '../../../styles/theme.js';
import '../../../wallet/index.js';
import { useAccount } from 'wagmi';
import { useDepositButton } from '../hooks/useDepositButton.js';
import { useAppchainBridgeContext } from './AppchainBridgeProvider.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { ConnectWallet } from '../../../wallet/components/ConnectWallet.js';
const AppchainBridgeTransactionButton = () => {
  const _useAppchainBridgeCon = useAppchainBridgeContext(),
    handleDeposit = _useAppchainBridgeCon.handleDeposit,
    depositStatus = _useAppchainBridgeCon.depositStatus,
    direction = _useAppchainBridgeCon.direction,
    handleWithdraw = _useAppchainBridgeCon.handleWithdraw,
    withdrawStatus = _useAppchainBridgeCon.withdrawStatus;
  const _useAppchainBridgeCon2 = useAppchainBridgeContext(),
    bridgeParams = _useAppchainBridgeCon2.bridgeParams;
  const _useAccount = useAccount(),
    isConnected = _useAccount.isConnected;
  const _useDepositButton = useDepositButton({
      depositStatus,
      withdrawStatus,
      bridgeParams
    }),
    isRejected = _useDepositButton.isRejected,
    buttonContent = _useDepositButton.buttonContent,
    isDisabled = _useDepositButton.isDisabled;
  const buttonHandler = direction === 'deposit' ? handleDeposit : handleWithdraw;
  if (!isConnected) {
    return /*#__PURE__*/jsx(ConnectWallet, {
      className: "w-full"
    });
  }
  return /*#__PURE__*/jsxs("div", {
    className: "w-full pt-2",
    children: [/*#__PURE__*/jsx("button", {
      onClick: buttonHandler,
      className: cn(pressable.primary, border.radius, 'w-full rounded-xl', 'px-4 py-3 font-medium text-base text-white leading-6', text.headline, isDisabled && pressable.disabled),
      type: "button",
      disabled: isDisabled,
      children: /*#__PURE__*/jsx("div", {
        className: cn(text.headline, color.inverse, 'flex justify-center'),
        children: buttonContent
      })
    }), isRejected && /*#__PURE__*/jsx("div", {
      className: cn(text.label2, color.error, 'mt-2'),
      children: "Transaction denied"
    })]
  });
};
export { AppchainBridgeTransactionButton };
//# sourceMappingURL=AppchainBridgeTransactionButton.js.map
