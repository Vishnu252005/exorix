'use client';
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { getChainExplorer } from '../../../core/network/getChainExplorer.js';
import { useValue } from '../../../internal/hooks/useValue.js';
import { baseSvg } from '../../../internal/svg/baseSvg.js';
import { coinbaseLogoSvg } from '../../../internal/svg/coinbaseLogoSvg.js';
import { toReadableAmount } from '../../../swap/utils/toReadableAmount.js';
import { createContext, useState, useEffect, useCallback, useContext } from 'react';
import { erc20Abi } from 'viem';
import { useAccount, useConfig } from 'wagmi';
import { getBalance, readContract } from 'wagmi/actions';
import { DEFAULT_BRIDGEABLE_TOKENS } from '../constants.js';
import { useChainConfig } from '../hooks/useAppchainConfig.js';
import { useDeposit } from '../hooks/useDeposit.js';
import { useWithdraw } from '../hooks/useWithdraw.js';
import { defaultPriceFetcher } from '../utils/defaultPriceFetcher.js';
import { jsx } from 'react/jsx-runtime';
const AppchainBridgeContext = /*#__PURE__*/createContext(undefined);
const AppchainBridgeProvider = ({
  children,
  chain,
  appchain,
  bridgeableTokens = DEFAULT_BRIDGEABLE_TOKENS,
  handleFetchPrice = defaultPriceFetcher
}) => {
  // Source network
  const _useState = useState(_objectSpread(_objectSpread({}, chain), {}, {
      icon: baseSvg
    })),
    _useState2 = _slicedToArray(_useState, 2),
    from = _useState2[0],
    setFrom = _useState2[1];
  // Destination network
  const _useState3 = useState(_objectSpread(_objectSpread({}, appchain.chain), {}, {
      icon: appchain.icon || coinbaseLogoSvg
    })),
    _useState4 = _slicedToArray(_useState3, 2),
    to = _useState4[0],
    setTo = _useState4[1];
  // op-enclave configuration https://github.com/base/op-enclave/blob/main/contracts/src/DeployChain.sol
  const _useChainConfig = useChainConfig({
      l2ChainId: chain.id,
      appchainChainId: appchain.chain.id
    }),
    config = _useChainConfig.config,
    error = _useChainConfig.error;
  if (error) {
    console.error(error);
    throw new Error('Error loading chain configuration. Ensure you have the correct chain ID.');
  }
  if (bridgeableTokens.length === 0) {
    throw new Error('Bridgeable tokens must be provided as a parameter to AppchainBridge.');
  }
  if (!config) {
    return null;
  }
  // Wagmi hooks
  const _useAccount = useAccount(),
    address = _useAccount.address;
  const wagmiConfig = useConfig();
  // Bridge params
  const _useState5 = useState({
      amount: '',
      amountUSD: '0.00',
      token: bridgeableTokens[0],
      recipient: address
    }),
    _useState6 = _slicedToArray(_useState5, 2),
    bridgeParams = _useState6[0],
    setBridgeParams = _useState6[1];
  // Bridge state
  const _useState7 = useState(false),
    _useState8 = _slicedToArray(_useState7, 2),
    isPriceLoading = _useState8[0],
    setIsPriceLoading = _useState8[1];
  const _useState9 = useState(false),
    _useState10 = _slicedToArray(_useState9, 2),
    isAddressModalOpen = _useState10[0],
    setIsAddressModalOpen = _useState10[1];
  const _useState11 = useState(false),
    _useState12 = _slicedToArray(_useState11, 2),
    isWithdrawModalOpen = _useState12[0],
    setIsWithdrawModalOpen = _useState12[1];
  const _useState13 = useState(false),
    _useState14 = _slicedToArray(_useState13, 2),
    isSuccessModalOpen = _useState14[0],
    setIsSuccessModalOpen = _useState14[1];
  const _useState15 = useState(false),
    _useState16 = _slicedToArray(_useState15, 2),
    isResumeTransactionModalOpen = _useState16[0],
    setIsResumeTransactionModalOpen = _useState16[1];
  const direction = from.id === chain.id ? 'deposit' : 'withdraw';
  const _useState17 = useState(''),
    _useState18 = _slicedToArray(_useState17, 2),
    balance = _useState18[0],
    setBalance = _useState18[1];
  const _useState19 = useState(),
    _useState20 = _slicedToArray(_useState19, 2),
    resumeWithdrawalTxHash = _useState20[0],
    setResumeWithdrawalTxHash = _useState20[1];
  // Deposit
  const _useDeposit = useDeposit(),
    deposit = _useDeposit.deposit,
    depositStatus = _useDeposit.depositStatus,
    depositTransactionHash = _useDeposit.transactionHash,
    resetDepositStatus = _useDeposit.resetDepositStatus;
  const _useWithdraw = useWithdraw({
      config,
      chain,
      bridgeParams
    }),
    withdraw = _useWithdraw.withdraw,
    withdrawStatus = _useWithdraw.withdrawStatus,
    waitForWithdrawal = _useWithdraw.waitForWithdrawal,
    proveAndFinalizeWithdrawal = _useWithdraw.proveAndFinalizeWithdrawal,
    finalizedWithdrawalTxHash = _useWithdraw.finalizedWithdrawalTxHash,
    resetWithdrawStatus = _useWithdraw.resetWithdrawStatus;
  // Update recipient when wallet connects
  // Defaults to current wallet address
  useEffect(() => {
    setBridgeParams(prev => _objectSpread(_objectSpread({}, prev), {}, {
      recipient: address
    }));
  }, [address]);
  // Retrieves the ETH or ERC20 balance of the user
  // Based on the currently selected token
  const fetchBalance = useCallback(async () => {
    if (!address) {
      return;
    }
    const tokenAddress = direction === 'deposit' ? bridgeParams.token.address : bridgeParams.token.remoteToken;
    let _balance;
    if (!tokenAddress || (/* v8 ignore next 1 */
    direction === 'withdraw' && bridgeParams.token.isCustomGasToken)) {
      const ethBalance = await getBalance(wagmiConfig, {
        address,
        chainId: from.id
      });
      _balance = toReadableAmount(ethBalance.value.toString(), ethBalance.decimals);
    } else {
      const erc20Balance = await readContract(wagmiConfig, {
        abi: erc20Abi,
        functionName: 'balanceOf',
        args: [address],
        address: tokenAddress,
        chainId: from.id
      });
      _balance = toReadableAmount(erc20Balance.toString(), bridgeParams.token.decimals);
    }
    setBalance(_balance);
  }, [address, direction, bridgeParams.token, from.id, wagmiConfig]);
  // Fetch balance when bridge params change
  useEffect(() => {
    fetchBalance();
  }, [fetchBalance]);
  // Fetch balance when withdraw is successful
  useEffect(() => {
    if (withdrawStatus === 'claimSuccess' || depositStatus === 'depositSuccess') {
      fetchBalance();
    }
  }, [withdrawStatus, depositStatus, fetchBalance]);
  const handleToggle = useCallback(() => {
    const tmp = from;
    setFrom(to);
    setTo(tmp);
    // Reset statuses when direction changes
    resetDepositStatus();
    resetWithdrawStatus();
  }, [from, to, resetDepositStatus, resetWithdrawStatus]);
  const handleAmountChange = useCallback(async ({
    amount,
    token,
    remoteToken
  }) => {
    setIsPriceLoading(true);
    setBridgeParams(prev => _objectSpread(_objectSpread({}, prev), {}, {
      amount,
      token,
      remoteToken
    }));
    const amountUSD = await handleFetchPrice(amount, token);
    setBridgeParams(prev => _objectSpread(_objectSpread({}, prev), {}, {
      amountUSD
    }));
    setIsPriceLoading(false);
  }, [handleFetchPrice]);
  const handleAddressSelect = useCallback(address => {
    setBridgeParams(prev => _objectSpread(_objectSpread({}, prev), {}, {
      recipient: address
    }));
  }, []);
  const handleResumeTransaction = useCallback(txHash => {
    setResumeWithdrawalTxHash(txHash);
    setIsResumeTransactionModalOpen(false);
  }, []);
  const handleOpenExplorer = useCallback(() => {
    const blockExplorerUrl = getChainExplorer(chain.id);
    const txHash = depositStatus === 'depositSuccess' ? depositTransactionHash : finalizedWithdrawalTxHash;
    window.open(`${blockExplorerUrl}/tx/${txHash}`, '_blank');
  }, [chain.id, depositStatus, depositTransactionHash, finalizedWithdrawalTxHash]);
  const handleDeposit = useCallback(async () => {
    await deposit({
      config,
      from,
      bridgeParams
    });
  }, [deposit, config, from, bridgeParams]);
  const handleWithdraw = useCallback(async () => {
    await withdraw();
  }, [withdraw]);
  const handleResetState = useCallback(() => {
    setIsSuccessModalOpen(false);
    setIsWithdrawModalOpen(false);
    setIsResumeTransactionModalOpen(false);
    setResumeWithdrawalTxHash(undefined);
  }, []);
  // Open withdraw modal when withdraw is successful, or when transaction is resumed
  useEffect(() => {
    if (withdrawStatus === 'withdrawSuccess' || resumeWithdrawalTxHash) {
      setIsWithdrawModalOpen(true);
    }
  }, [withdrawStatus, resumeWithdrawalTxHash]);
  // Reset withdraw status when withdraw modal is closed
  useEffect(() => {
    if (!isWithdrawModalOpen) {
      resetWithdrawStatus();
    }
  }, [isWithdrawModalOpen, resetWithdrawStatus]);
  // Open success modal when deposit is successful
  useEffect(() => {
    if (depositStatus === 'depositSuccess') {
      setIsSuccessModalOpen(true);
    }
  }, [depositStatus]);
  // Open success modal when withdraw is successful
  useEffect(() => {
    if (withdrawStatus === 'claimSuccess') {
      setIsSuccessModalOpen(true);
    }
  }, [withdrawStatus]);
  const value = useValue({
    // Internal
    config,
    from,
    to,
    bridgeableTokens,
    bridgeParams,
    isPriceLoading,
    // Bridge UI
    balance,
    handleToggle,
    handleAmountChange,
    // Address modal
    isAddressModalOpen,
    setIsAddressModalOpen,
    handleAddressSelect,
    // Success modal
    isSuccessModalOpen,
    setIsSuccessModalOpen,
    handleOpenExplorer,
    handleResetState,
    // Resume transaction modal
    isResumeTransactionModalOpen,
    setIsResumeTransactionModalOpen,
    resumeWithdrawalTxHash,
    setResumeWithdrawalTxHash,
    handleResumeTransaction,
    // Deposits and Withdrawals
    handleDeposit,
    depositStatus,
    depositTransactionHash,
    direction,
    handleWithdraw,
    withdrawStatus,
    waitForWithdrawal,
    proveAndFinalizeWithdrawal,
    finalizedWithdrawalTxHash,
    isWithdrawModalOpen,
    setIsWithdrawModalOpen,
    resetDepositStatus,
    resetWithdrawStatus
  });
  return /*#__PURE__*/jsx(AppchainBridgeContext.Provider, {
    value: value,
    children: children
  });
};
const useAppchainBridgeContext = () => {
  const context = useContext(AppchainBridgeContext);
  if (context === undefined) {
    throw new Error('useAppchainBridge must be used within a BridgeProvider');
  }
  return context;
};
export { AppchainBridgeProvider, useAppchainBridgeContext };
//# sourceMappingURL=AppchainBridgeProvider.js.map
