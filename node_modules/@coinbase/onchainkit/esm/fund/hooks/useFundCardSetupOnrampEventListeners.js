import { useCallback, useEffect } from 'react';
import { useFundContext } from '../components/FundCardProvider.js';
import { FUND_BUTTON_RESET_TIMEOUT } from '../constants.js';
import { setupOnrampEventListeners } from '../utils/setupOnrampEventListeners.js';
const useFundCardSetupOnrampEventListeners = () => {
  const _useFundContext = useFundContext(),
    setSubmitButtonState = _useFundContext.setSubmitButtonState,
    updateLifecycleStatus = _useFundContext.updateLifecycleStatus;
  const handleOnrampEvent = useCallback(data => {
    if (data.eventName === 'transition_view') {
      updateLifecycleStatus({
        statusName: 'transactionPending',
        statusData: undefined
      });
    } else if (data.eventName === 'error') {
      updateLifecycleStatus({
        statusName: 'error',
        statusData: data.error
      });
      setSubmitButtonState('error');
      setTimeout(() => {
        setSubmitButtonState('default');
      }, FUND_BUTTON_RESET_TIMEOUT);
    }
  }, [updateLifecycleStatus, setSubmitButtonState]);
  const handleOnrampSuccess = useCallback(data => {
    updateLifecycleStatus({
      statusName: 'transactionSuccess',
      statusData: data
    });
    setSubmitButtonState('success');
    setTimeout(() => {
      setSubmitButtonState('default');
    }, FUND_BUTTON_RESET_TIMEOUT);
  }, [updateLifecycleStatus, setSubmitButtonState]);
  const handleOnrampExit = useCallback(() => {
    setSubmitButtonState('default');
    updateLifecycleStatus({
      statusName: 'exit',
      statusData: undefined
    });
  }, [updateLifecycleStatus, setSubmitButtonState]);
  useEffect(() => {
    const unsubscribe = setupOnrampEventListeners({
      onEvent: handleOnrampEvent,
      onExit: handleOnrampExit,
      onSuccess: handleOnrampSuccess
    });
    return () => {
      unsubscribe();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
};
export { useFundCardSetupOnrampEventListeners };
//# sourceMappingURL=useFundCardSetupOnrampEventListeners.js.map
