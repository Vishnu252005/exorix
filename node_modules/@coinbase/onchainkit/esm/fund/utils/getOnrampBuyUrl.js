const _excluded = ["projectId", "originComponentName"];
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
import { version } from '../../version.js';
import { ONRAMP_BUY_URL } from '../constants.js';

/**
 * Builds a Coinbase Onramp buy URL using the provided parameters.
 * @param projectId a projectId generated in the Coinbase Developer Portal
 * @returns the URL
 */
function getOnrampBuyUrl(_ref) {
  let projectId = _ref.projectId,
    originComponentName = _ref.originComponentName,
    props = _objectWithoutProperties(_ref, _excluded);
  const url = new URL(ONRAMP_BUY_URL);
  if (projectId !== undefined) {
    // Coinbase Onramp requires projectId to be passed as appId
    url.searchParams.append('appId', projectId);
  }
  for (const key of Object.keys(props)) {
    const value = props[key];
    if (value !== undefined) {
      if (['string', 'number', 'boolean'].includes(typeof value)) {
        url.searchParams.append(key, value.toString());
      } else {
        url.searchParams.append(key, JSON.stringify(value));
      }
    }
  }
  if (originComponentName) {
    url.searchParams.append('sdkVersion', `onchainkit@${version}:${originComponentName}`);
  } else {
    url.searchParams.append('sdkVersion', `onchainkit@${version}`);
  }
  url.searchParams.sort();
  return url.toString();
}
export { getOnrampBuyUrl };
//# sourceMappingURL=getOnrampBuyUrl.js.map
