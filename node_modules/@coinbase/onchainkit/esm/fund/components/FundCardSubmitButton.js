'use client';
import { useCallback, useMemo } from 'react';
import { useFundCardFundingUrl } from '../hooks/useFundCardFundingUrl.js';
import { FundButton } from './FundButton.js';
import { useFundContext } from './FundCardProvider.js';
import { jsx } from 'react/jsx-runtime';
function FundCardSubmitButton() {
  const _useFundContext = useFundContext(),
    fundAmountFiat = _useFundContext.fundAmountFiat,
    fundAmountCrypto = _useFundContext.fundAmountCrypto,
    submitButtonState = _useFundContext.submitButtonState,
    setSubmitButtonState = _useFundContext.setSubmitButtonState,
    buttonText = _useFundContext.buttonText,
    currency = _useFundContext.currency,
    updateLifecycleStatus = _useFundContext.updateLifecycleStatus;
  const fundingUrl = useFundCardFundingUrl();
  const handleOnClick = useCallback(() => setSubmitButtonState('loading'), [setSubmitButtonState]);
  const handleOnPopupClose = useCallback(() => {
    updateLifecycleStatus({
      statusName: 'exit',
      statusData: undefined
    });
    setSubmitButtonState('default');
  }, [updateLifecycleStatus, setSubmitButtonState]);
  const isButtonDisabled = useMemo(() => (!fundAmountFiat || Number(fundAmountCrypto) === 0) && (!fundAmountCrypto || Number(fundAmountFiat) === 0), [fundAmountCrypto, fundAmountFiat]);
  return /*#__PURE__*/jsx(FundButton, {
    disabled: isButtonDisabled,
    hideIcon: submitButtonState === 'default',
    text: buttonText,
    className: "w-full",
    fundingUrl: fundingUrl,
    state: submitButtonState,
    onClick: handleOnClick,
    onPopupClose: handleOnPopupClose,
    fiatCurrency: currency
  });
}
export { FundCardSubmitButton };
//# sourceMappingURL=FundCardSubmitButton.js.map
