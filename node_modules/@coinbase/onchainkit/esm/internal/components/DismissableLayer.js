import { useRef, useEffect } from 'react';
import { jsx } from 'react/jsx-runtime';

/**
 * DismissableLayer handles dismissal using outside clicks and escape key events
 */
function DismissableLayer({
  children,
  disableEscapeKey = false,
  disableOutsideClick = false,
  onDismiss,
  triggerRef,
  preventTriggerEvents = false
}) {
  const layerRef = useRef(null);
  useEffect(() => {
    if (disableOutsideClick && disableEscapeKey) {
      return;
    }
    const handleTriggerClick = event => {
      if (preventTriggerEvents) {
        event.preventDefault();
        event.stopPropagation();
      }
    };
    const isClickInsideLayer = target => {
      return layerRef.current?.contains(target);
    };
    const handlePointerDownCapture = event => {
      if (disableOutsideClick) {
        return;
      }
      if (!(event.target instanceof Node)) {
        return;
      }
      const target = event.target;
      if (triggerRef?.current?.contains(target)) {
        handleTriggerClick(event);
        return;
      }
      if (!isClickInsideLayer(target)) {
        onDismiss?.();
      }
    };
    const handleKeyDown = event => {
      if (!disableEscapeKey && event.key === 'Escape') {
        onDismiss?.();
      }
    };
    document.addEventListener('pointerdown', handlePointerDownCapture, true);
    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('pointerdown', handlePointerDownCapture, true);
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [disableOutsideClick, disableEscapeKey, onDismiss, triggerRef, preventTriggerEvents]);
  return /*#__PURE__*/jsx("div", {
    "data-testid": "ockDismissableLayer",
    ref: layerRef,
    children: children
  });
}
export { DismissableLayer };
//# sourceMappingURL=DismissableLayer.js.map
