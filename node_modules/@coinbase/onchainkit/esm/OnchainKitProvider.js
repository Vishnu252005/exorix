'use client';
import { ONCHAIN_KIT_CONFIG, setOnchainKitConfig } from './core/OnchainKitConfig.js';
import { createContext, useMemo } from 'react';
import { DefaultOnchainKitProviders } from './DefaultOnchainKitProviders.js';
import OnchainKitProviderBoundary from './OnchainKitProviderBoundary.js';
import { DEFAULT_PRIVACY_URL, DEFAULT_TERMS_URL } from './core/constants.js';
import { COINBASE_VERIFIED_ACCOUNT_SCHEMA_ID } from './identity/constants.js';
import { checkHashLength } from './internal/utils/checkHashLength.js';
import { jsx } from 'react/jsx-runtime';
const OnchainKitContext = /*#__PURE__*/createContext(ONCHAIN_KIT_CONFIG);
/**
 * Provides the OnchainKit React Context to the app.
 */
function OnchainKitProvider({
  address,
  analytics,
  apiKey,
  chain,
  children,
  config,
  projectId,
  rpcUrl,
  schemaId
}) {
  if (schemaId && !checkHashLength(schemaId, 64)) {
    throw Error('EAS schemaId must be 64 characters prefixed with "0x"');
  }
  const sessionId = useMemo(() => crypto.randomUUID(), []);
  // eslint-disable-next-line complexity
  const value = useMemo(() => {
    const defaultPaymasterUrl = apiKey ? `https://api.developer.coinbase.com/rpc/v1/${chain.name.replace(' ', '-').toLowerCase()}/${apiKey}` : null;
    const onchainKitConfig = {
      address: address ?? null,
      apiKey: apiKey ?? null,
      chain: chain,
      config: {
        analytics: analytics ?? true,
        analyticsUrl: config?.analyticsUrl ?? null,
        appearance: {
          name: config?.appearance?.name ?? 'Dapp',
          logo: config?.appearance?.logo ?? '',
          mode: config?.appearance?.mode ?? 'auto',
          theme: config?.appearance?.theme ?? 'default'
        },
        paymaster: config?.paymaster || defaultPaymasterUrl,
        wallet: {
          display: config?.wallet?.display ?? 'classic',
          termsUrl: config?.wallet?.termsUrl || DEFAULT_TERMS_URL,
          privacyUrl: config?.wallet?.privacyUrl || DEFAULT_PRIVACY_URL,
          supportedWallets: {
            rabby: config?.wallet?.supportedWallets?.rabby ?? false,
            trust: config?.wallet?.supportedWallets?.trust ?? false,
            frame: config?.wallet?.supportedWallets?.frame ?? false
          }
        }
      },
      projectId: projectId ?? null,
      rpcUrl: rpcUrl ?? null,
      schemaId: schemaId ?? COINBASE_VERIFIED_ACCOUNT_SCHEMA_ID,
      sessionId
    };
    setOnchainKitConfig(onchainKitConfig);
    return onchainKitConfig;
  }, [address, analytics, apiKey, chain, config, projectId, rpcUrl, schemaId, sessionId]);
  return /*#__PURE__*/jsx(DefaultOnchainKitProviders, {
    apiKey: apiKey,
    appName: value.config.appearance.name,
    appLogoUrl: value.config.appearance.logo,
    children: /*#__PURE__*/jsx(OnchainKitContext.Provider, {
      value: value,
      children: /*#__PURE__*/jsx(OnchainKitProviderBoundary, {
        children: children
      })
    })
  });
}
export { OnchainKitContext, OnchainKitProvider };
//# sourceMappingURL=OnchainKitProvider.js.map
