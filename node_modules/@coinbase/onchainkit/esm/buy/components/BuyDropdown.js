'use client';
import { useAnalytics } from '../../core/analytics/hooks/useAnalytics.js';
import { BuyEvent } from '../../core/analytics/types.js';
import { openPopup } from '../../internal/utils/openPopup.js';
import { useOnchainKit } from '../../useOnchainKit.js';
import { useCallback, useMemo, useEffect } from 'react';
import { useAccount } from 'wagmi';
import { ONRAMP_BUY_URL } from '../../fund/constants.js';
import { getFundingPopupSize } from '../../fund/utils/getFundingPopupSize.js';
import { getRoundedAmount } from '../../internal/utils/getRoundedAmount.js';
import { cn, text, color, background, border } from '../../styles/theme.js';
import { ONRAMP_PAYMENT_METHODS } from '../constants.js';
import { isApplePaySupported } from '../utils/isApplePaySupported.js';
import { BuyOnrampItem } from './BuyOnrampItem.js';
import { useBuyContext } from './BuyProvider.js';
import { BuyTokenItem } from './BuyTokenItem.js';
import { jsxs, jsx } from 'react/jsx-runtime';
function BuyDropdown() {
  const _useOnchainKit = useOnchainKit(),
    projectId = _useOnchainKit.projectId;
  const _useBuyContext = useBuyContext(),
    to = _useBuyContext.to,
    fromETH = _useBuyContext.fromETH,
    fromUSDC = _useBuyContext.fromUSDC,
    from = _useBuyContext.from,
    startPopupMonitor = _useBuyContext.startPopupMonitor,
    setIsDropdownOpen = _useBuyContext.setIsDropdownOpen;
  const _useAccount = useAccount(),
    address = _useAccount.address;
  const _useAnalytics = useAnalytics(),
    sendAnalytics = _useAnalytics.sendAnalytics;
  const handleOnrampClick = useCallback(paymentMethodId => {
    return () => {
      sendAnalytics(BuyEvent.BuyOptionSelected, {
        option: paymentMethodId
      });
      const assetSymbol = to?.token?.symbol;
      let fundAmount = to?.amount;
      // funding url requires a leading zero if the amount is less than 1
      if (fundAmount?.[0] === '.') {
        fundAmount = `0${fundAmount}`;
      }
      const fundingUrl = `${ONRAMP_BUY_URL}/one-click?appId=${projectId}&addresses={"${address}":["base"]}&assets=["${assetSymbol}"]&presetCryptoAmount=${fundAmount}&defaultPaymentMethod=${paymentMethodId}`;
      const _getFundingPopupSize = getFundingPopupSize('md', fundingUrl),
        height = _getFundingPopupSize.height,
        width = _getFundingPopupSize.width;
      const popupWindow = openPopup({
        url: fundingUrl,
        height,
        width,
        target: '_blank'
      });
      if (popupWindow) {
        // Detects when the popup is closed
        // to stop loading state
        startPopupMonitor(popupWindow);
      }
    };
  }, [address, to, projectId, startPopupMonitor, sendAnalytics]);
  const formattedAmountUSD = useMemo(() => {
    if (!to?.amountUSD || to?.amountUSD === '0') {
      return null;
    }
    const roundedAmount = Number(getRoundedAmount(to?.amountUSD, 2));
    return `$${roundedAmount.toFixed(2)}`;
  }, [to?.amountUSD]);
  const isToETH = to?.token?.symbol === 'ETH';
  const isToUSDC = to?.token?.symbol === 'USDC';
  const showFromToken = to?.token?.symbol !== from?.token?.symbol && from && from?.token?.symbol !== 'ETH' && from?.token?.symbol !== 'USDC';
  useEffect(() => {
    const handleKeyDown = event => {
      if (event.key === 'Escape') {
        setIsDropdownOpen(false);
      }
    };
    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [setIsDropdownOpen]);
  const isApplePayEnabled = isApplePaySupported();
  return /*#__PURE__*/jsxs("div", {
    className: cn(color.foreground, background.default, 'absolute right-0 bottom-0 flex translate-y-[102%] flex-col gap-2', 'z-10 min-w-80 rounded border p-2', border.radius),
    children: [/*#__PURE__*/jsx("div", {
      className: cn(text.headline, 'px-2 pt-2'),
      children: "Buy with"
    }), !isToETH && /*#__PURE__*/jsx(BuyTokenItem, {
      swapUnit: fromETH
    }), !isToUSDC && /*#__PURE__*/jsx(BuyTokenItem, {
      swapUnit: fromUSDC
    }), showFromToken && /*#__PURE__*/jsx(BuyTokenItem, {
      swapUnit: from
    }), ONRAMP_PAYMENT_METHODS.map(method => {
      if (method.id === 'APPLE_PAY' && !isApplePayEnabled) {
        return null;
      }
      return /*#__PURE__*/jsx(BuyOnrampItem, {
        name: method.name,
        description: method.description,
        onClick: handleOnrampClick(method.id),
        icon: method.icon,
        to: to
      }, method.id);
    }), !!formattedAmountUSD && /*#__PURE__*/jsx("div", {
      className: cn('flex justify-end', text.legal, color.foregroundMuted),
      children: `${to?.amount} ${to?.token?.name} â‰ˆ ${formattedAmountUSD}`
    })]
  });
}
export { BuyDropdown };
//# sourceMappingURL=BuyDropdown.js.map
