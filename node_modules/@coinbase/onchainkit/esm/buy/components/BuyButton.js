'use client';
import { useCallback, useMemo } from 'react';
import { Spinner } from '../../internal/components/Spinner.js';
import { checkmarkSvg } from '../../internal/svg/checkmarkSvg.js';
import { CloseSvg } from '../../internal/svg/closeSvg.js';
import { icon, cn, text, color, background, border, pressable } from '../../styles/theme.js';
import '../../wallet/index.js';
import { useBuyContext } from './BuyProvider.js';
import { jsx } from 'react/jsx-runtime';
import { ConnectWallet } from '../../wallet/components/ConnectWallet.js';
function BuyButton() {
  const _useBuyContext = useBuyContext(),
    address = _useBuyContext.address,
    disabled = _useBuyContext.disabled,
    setIsDropdownOpen = _useBuyContext.setIsDropdownOpen,
    isDropdownOpen = _useBuyContext.isDropdownOpen,
    from = _useBuyContext.from,
    fromETH = _useBuyContext.fromETH,
    fromUSDC = _useBuyContext.fromUSDC,
    to = _useBuyContext.to,
    statusName = _useBuyContext.lifecycleStatus.statusName,
    updateLifecycleStatus = _useBuyContext.updateLifecycleStatus;
  const isLoading = to?.loading || from?.loading || fromETH?.loading || fromUSDC?.loading || statusName === 'transactionPending' || statusName === 'transactionApproved';
  const isMissingRequiredField = !to?.amount || !to?.token;
  const isDisabled = isLoading || disabled;
  const handleSubmit = useCallback(() => {
    if (isMissingRequiredField) {
      updateLifecycleStatus({
        statusName: 'error',
        statusData: {
          code: 'TmBPc05',
          error: 'Missing required fields',
          message: 'Complete the field to continue'
        }
      });
      return;
    }
    if (isDropdownOpen) {
      setIsDropdownOpen(false);
      return;
    }
    if (!isDropdownOpen) {
      setIsDropdownOpen(true);
    }
  }, [isMissingRequiredField, setIsDropdownOpen, isDropdownOpen, updateLifecycleStatus]);
  const buttonContent = useMemo(() => {
    if (statusName === 'success') {
      return checkmarkSvg;
    }
    if (isDropdownOpen) {
      return /*#__PURE__*/jsx(CloseSvg, {
        className: icon.inverse
      });
    }
    return 'Buy';
  }, [statusName, isDropdownOpen]);
  if (!isDisabled && !address) {
    return /*#__PURE__*/jsx(ConnectWallet, {
      text: "Buy",
      className: "h-12 w-24 min-w-24"
    });
  }
  return /*#__PURE__*/jsx("button", {
    type: "button",
    className: cn(background.primary, border.radius, 'flex rounded-xl', 'h-12 w-24 items-center justify-center px-4 py-3', isDisabled && pressable.disabled, text.headline),
    onClick: handleSubmit,
    "data-testid": "ockBuyButton_Button",
    disabled: isDisabled,
    children: isLoading ? /*#__PURE__*/jsx(Spinner, {}) : /*#__PURE__*/jsx("span", {
      className: cn(text.headline, color.inverse),
      children: buttonContent
    })
  });
}
export { BuyButton };
//# sourceMappingURL=BuyButton.js.map
