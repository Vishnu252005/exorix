'use client';
import { useCallback, useMemo } from 'react';
import { getRoundedAmount } from '../../internal/utils/getRoundedAmount.js';
import { cn, color, pressable, text } from '../../styles/theme.js';
import '../../token/index.js';
import { useBuyContext } from './BuyProvider.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { TokenImage } from '../../token/components/TokenImage.js';
function BuyTokenItem({
  swapUnit
}) {
  const _useBuyContext = useBuyContext(),
    handleSubmit = _useBuyContext.handleSubmit,
    setIsDropdownOpen = _useBuyContext.setIsDropdownOpen;
  if (!swapUnit || !swapUnit.token) {
    return null;
  }
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const handleClick = useCallback(() => {
    setIsDropdownOpen(false);
    handleSubmit(swapUnit);
  }, [handleSubmit, swapUnit, setIsDropdownOpen]);
  const hasInsufficientBalance = !swapUnit.balance || Number.parseFloat(swapUnit.balance) < Number.parseFloat(swapUnit.amount);
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const roundedAmount = useMemo(() => {
    if (!swapUnit.amount) {
      return '';
    }
    return getRoundedAmount(swapUnit.amount, 10);
  }, [swapUnit.amount]);
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const roundedBalance = useMemo(() => {
    return getRoundedAmount(swapUnit.balance || '0', 3);
  }, [swapUnit.balance]);
  return /*#__PURE__*/jsxs("button", {
    className: cn('flex items-center gap-2 rounded-lg p-2', !hasInsufficientBalance && pressable.default, text.label2),
    onClick: handleClick,
    type: "button",
    disabled: hasInsufficientBalance,
    children: [/*#__PURE__*/jsx(TokenImage, {
      token: swapUnit.token,
      size: 36
    }), /*#__PURE__*/jsxs("div", {
      className: cn('flex flex-col items-start', hasInsufficientBalance ? color.foregroundMuted : color.foreground),
      children: [/*#__PURE__*/jsxs("div", {
        children: [roundedAmount, " ", swapUnit.token.name]
      }), /*#__PURE__*/jsx("div", {
        className: cn('text-xs', hasInsufficientBalance ? color.error : color.foregroundMuted),
        children: `${hasInsufficientBalance ? 'Insufficient balance' : 'Balance'}: ${roundedBalance}`
      })]
    })]
  });
}
export { BuyTokenItem };
//# sourceMappingURL=BuyTokenItem.js.map
