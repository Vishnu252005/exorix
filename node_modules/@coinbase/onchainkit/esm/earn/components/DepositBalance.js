'use client';
import { getTruncatedAmount } from '../utils/getTruncatedAmount.js';
import { Skeleton } from '../../internal/components/Skeleton.js';
import { cn } from '../../styles/theme.js';
import { useCallback, useMemo } from 'react';
import { useAccount } from 'wagmi';
import { EarnBalance } from './EarnBalance.js';
import { useEarnContext } from './EarnProvider.js';
import { jsx, jsxs } from 'react/jsx-runtime';
function DepositBalance({
  className
}) {
  const _useAccount = useAccount(),
    address = _useAccount.address;
  const _useEarnContext = useEarnContext(),
    setDepositAmount = _useEarnContext.setDepositAmount,
    vaultToken = _useEarnContext.vaultToken,
    walletBalance = _useEarnContext.walletBalance,
    status = _useEarnContext.walletBalanceStatus;
  const handleMaxPress = useCallback(() => {
    if (walletBalance) {
      setDepositAmount(walletBalance);
    }
  }, [walletBalance, setDepositAmount]);
  const balance = useMemo(() => {
    if (!walletBalance) {
      return '0';
    }
    return getTruncatedAmount(walletBalance.toString(), 6);
  }, [walletBalance]);
  const title = useMemo(() => {
    if (!address) {
      return 'Wallet not connected';
    }
    // Fetching vault token, but user is connected
    if (!vaultToken) {
      return /*#__PURE__*/jsx(Skeleton, {
        className: cn('!bg-[var(--ock-bg-alternate-active)] h-6 w-24')
      });
    }
    if (status === 'pending') {
      return /*#__PURE__*/jsxs("div", {
        className: "flex gap-1",
        children: [/*#__PURE__*/jsx(Skeleton, {
          className: "!bg-[var(--ock-bg-alternate-active)] h-6 w-12"
        }), /*#__PURE__*/jsx("span", {
          children: vaultToken?.symbol
        })]
      });
    }
    return `${balance} ${vaultToken?.symbol}`;
  }, [balance, vaultToken, address, status]);
  const subtitle = useMemo(() => {
    if (!address) {
      return 'Connect wallet to deposit';
    }
    return 'Available to deposit';
  }, [address]);
  return /*#__PURE__*/jsx(EarnBalance, {
    className: className,
    title: title,
    subtitle: subtitle,
    onActionPress: handleMaxPress,
    showAction: !!walletBalance
  });
}
export { DepositBalance };
//# sourceMappingURL=DepositBalance.js.map
