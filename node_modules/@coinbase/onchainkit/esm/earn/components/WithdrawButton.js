'use client';
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { useWithdrawAnalytics } from '../hooks/useWithdrawAnalytics.js';
import { cn } from '../../styles/theme.js';
import '../../transaction/index.js';
import '../../wallet/index.js';
import { useState, useCallback } from 'react';
import { useEarnContext } from './EarnProvider.js';
import { jsx } from 'react/jsx-runtime';
import { ConnectWallet } from '../../wallet/components/ConnectWallet.js';
import { Transaction } from '../../transaction/components/Transaction.js';
import { TransactionButton } from '../../transaction/components/TransactionButton.js';
function WithdrawButton({
  className
}) {
  const _useEarnContext = useEarnContext(),
    address = _useEarnContext.recipientAddress,
    withdrawCalls = _useEarnContext.withdrawCalls,
    withdrawAmount = _useEarnContext.withdrawAmount,
    setWithdrawAmount = _useEarnContext.setWithdrawAmount,
    updateLifecycleStatus = _useEarnContext.updateLifecycleStatus,
    refetchDepositedBalance = _useEarnContext.refetchDepositedBalance,
    withdrawAmountError = _useEarnContext.withdrawAmountError,
    vaultToken = _useEarnContext.vaultToken,
    isSponsored = _useEarnContext.isSponsored;
  const _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    withdrawnAmount = _useState2[0],
    setWithdrawnAmount = _useState2[1];
  const _useWithdrawAnalytics = useWithdrawAnalytics(withdrawnAmount),
    setTransactionState = _useWithdrawAnalytics.setTransactionState;
  const handleOnStatus = useCallback(status => {
    setTransactionState(status.statusName);
    if (status.statusName === 'transactionPending') {
      updateLifecycleStatus({
        statusName: 'transactionPending'
      });
    }
    if (status.statusName === 'transactionLegacyExecuted' || status.statusName === 'success' || status.statusName === 'error') {
      updateLifecycleStatus(status);
    }
  }, [updateLifecycleStatus, setTransactionState]);
  const handleOnSuccess = useCallback(res => {
    if (res.transactionReceipts[0] && res.transactionReceipts[0].status === 'success') {
      if (withdrawAmount) {
        setWithdrawnAmount(withdrawAmount);
      }
      setWithdrawAmount('');
      refetchDepositedBalance();
    }
  }, [setWithdrawAmount, refetchDepositedBalance, withdrawAmount]);
  if (!address) {
    return /*#__PURE__*/jsx(ConnectWallet, {
      className: cn('w-full', className),
      text: "Connect to withdraw"
    });
  }
  return /*#__PURE__*/jsx(Transaction, {
    className: className,
    calls: withdrawCalls,
    onStatus: handleOnStatus,
    onSuccess: handleOnSuccess,
    isSponsored: isSponsored,
    resetAfter: 3_000,
    children: /*#__PURE__*/jsx(TransactionButton, {
      text: withdrawAmountError ?? 'Withdraw',
      successOverride: {
        text: `Withdrew ${withdrawnAmount} ${vaultToken?.symbol}`
      },
      disabled: !!withdrawAmountError || !withdrawAmount
    })
  });
}
export { WithdrawButton };
//# sourceMappingURL=WithdrawButton.js.map
