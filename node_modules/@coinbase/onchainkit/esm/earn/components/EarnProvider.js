'use client';
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { useBuildDepositToMorphoTx } from '../hooks/useBuildDepositToMorphoTx.js';
import { getToken } from '../utils/getToken.js';
import { useLifecycleStatus } from '../../internal/hooks/useLifecycleStatus.js';
import { useValue } from '../../internal/hooks/useValue.js';
import { useGetTokenBalance } from '../../wallet/hooks/useGetTokenBalance.js';
import { createContext, useState, useEffect, useCallback, useMemo, useContext } from 'react';
import { useAccount } from 'wagmi';
import { useBuildWithdrawFromMorphoTx } from '../hooks/useBuildWithdrawFromMorphoTx.js';
import { useMorphoVault } from '../hooks/useMorphoVault.js';
import { jsx } from 'react/jsx-runtime';
const EarnContext = /*#__PURE__*/createContext(undefined);
function EarnProvider({
  vaultAddress,
  children,
  isSponsored,
  onError,
  onStatus,
  onSuccess
}) {
  if (!vaultAddress) {
    throw new Error('vaultAddress is required. For a list of vaults, see: https://app.morpho.org/base/earn');
  }
  const _useLifecycleStatus = useLifecycleStatus({
      statusName: 'init',
      statusData: null
    }),
    _useLifecycleStatus2 = _slicedToArray(_useLifecycleStatus, 2),
    lifecycleStatus = _useLifecycleStatus2[0],
    updateLifecycleStatus = _useLifecycleStatus2[1];
  const _useAccount = useAccount(),
    address = _useAccount.address;
  const _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    withdrawAmount = _useState2[0],
    setWithdrawAmount = _useState2[1];
  const _useState3 = useState(''),
    _useState4 = _slicedToArray(_useState3, 2),
    depositAmount = _useState4[0],
    setDepositAmount = _useState4[1];
  useEffect(() => {
    if (lifecycleStatus.statusName === 'error') {
      onError?.(lifecycleStatus.statusData);
    }
    if (lifecycleStatus?.statusName === 'success') {
      onSuccess?.(lifecycleStatus?.statusData?.transactionReceipts?.[0]);
    }
    onStatus?.(lifecycleStatus);
  }, [lifecycleStatus, onStatus, onError, onSuccess]);
  const _useMorphoVault = useMorphoVault({
      vaultAddress,
      recipientAddress: address
    }),
    asset = _useMorphoVault.asset,
    depositedBalance = _useMorphoVault.balance,
    depositedBalanceStatus = _useMorphoVault.balanceStatus,
    refetchDepositedBalance = _useMorphoVault.refetchBalance,
    totalApy = _useMorphoVault.totalApy,
    nativeApy = _useMorphoVault.nativeApy,
    vaultFee = _useMorphoVault.vaultFee,
    vaultName = _useMorphoVault.vaultName,
    deposits = _useMorphoVault.deposits,
    liquidity = _useMorphoVault.liquidity,
    rewards = _useMorphoVault.rewards,
    error = _useMorphoVault.error;
  const vaultToken = asset ? getToken({
    address: asset.address,
    symbol: asset.symbol,
    name: asset.symbol,
    decimals: asset.decimals
  }) : undefined;
  const _useGetTokenBalance = useGetTokenBalance(address, vaultToken),
    walletBalance = _useGetTokenBalance.convertedBalance,
    walletBalanceStatus = _useGetTokenBalance.status,
    refetchWalletBalance = _useGetTokenBalance.refetch;
  const _useBuildDepositToMor = useBuildDepositToMorphoTx({
      vaultAddress,
      amount: depositAmount,
      recipientAddress: address
    }),
    depositCalls = _useBuildDepositToMor.calls;
  const _useBuildWithdrawFrom = useBuildWithdrawFromMorphoTx({
      vaultAddress,
      amount: withdrawAmount,
      recipientAddress: address,
      tokenDecimals: vaultToken?.decimals
    }),
    withdrawCalls = _useBuildWithdrawFrom.calls;
  // Lifecycle statuses
  const handleDepositAmount = useCallback(async amount => {
    updateLifecycleStatus({
      statusName: 'amountChange',
      statusData: {
        amount: amount,
        token: vaultToken
      }
    });
    setDepositAmount(amount);
  }, [updateLifecycleStatus, vaultToken]);
  const handleWithdrawAmount = useCallback(async amount => {
    updateLifecycleStatus({
      statusName: 'amountChange',
      statusData: {
        amount: amount,
        token: vaultToken
      }
    });
    setWithdrawAmount(amount);
  }, [updateLifecycleStatus, vaultToken]);
  // Validating input amounts
  const depositAmountError = useMemo(() => {
    if (!depositAmount) {
      return null;
    }
    if (Number(depositAmount) <= 0) {
      return 'Must be greater than 0';
    }
    if (Number(depositAmount) > Number(walletBalance)) {
      return 'Amount exceeds the balance';
    }
    return null;
  }, [depositAmount, walletBalance]);
  const withdrawAmountError = useMemo(() => {
    if (!withdrawAmount) {
      return null;
    }
    if (Number(withdrawAmount) === 0) {
      return 'Must be greater than 0';
    }
    if (Number(withdrawAmount) > Number(depositedBalance)) {
      return 'Amount exceeds the balance';
    }
    return null;
  }, [withdrawAmount, depositedBalance]);
  const value = useValue({
    error,
    recipientAddress: address,
    vaultAddress,
    vaultToken,
    vaultName,
    deposits,
    liquidity,
    depositedBalance,
    depositedBalanceStatus,
    refetchDepositedBalance,
    depositAmount,
    setDepositAmount: handleDepositAmount,
    depositAmountError,
    withdrawAmount,
    setWithdrawAmount: handleWithdrawAmount,
    withdrawAmountError,
    walletBalance,
    walletBalanceStatus,
    refetchWalletBalance,
    apy: totalApy,
    nativeApy,
    vaultFee,
    rewards,
    // TODO: update when we have logic to fetch interest
    interestEarned: '',
    withdrawCalls,
    depositCalls,
    lifecycleStatus,
    updateLifecycleStatus,
    isSponsored
  });
  return /*#__PURE__*/jsx(EarnContext.Provider, {
    value: value,
    children: children
  });
}
function useEarnContext() {
  const context = useContext(EarnContext);
  if (!context) {
    throw new Error('useEarnContext must be used within an EarnProvider');
  }
  return context;
}
export { EarnProvider, useEarnContext };
//# sourceMappingURL=EarnProvider.js.map
