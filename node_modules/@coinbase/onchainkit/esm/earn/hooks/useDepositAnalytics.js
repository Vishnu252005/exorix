function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { useAnalytics } from '../../core/analytics/hooks/useAnalytics.js';
import { EarnEvent } from '../../core/analytics/types.js';
import { useEarnContext } from '../components/EarnProvider.js';
import { useState, useRef, useMemo, useEffect } from 'react';
const useDepositAnalytics = depositedAmount => {
  const _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    transactionState = _useState2[0],
    setTransactionState = _useState2[1];
  // Undesirable, but required because Transaction emits multiple success and error events
  const successSent = useRef(false);
  const errorSent = useRef(false);
  const _useAnalytics = useAnalytics(),
    sendAnalytics = _useAnalytics.sendAnalytics;
  const _useEarnContext = useEarnContext(),
    vaultAddress = _useEarnContext.vaultAddress,
    vaultToken = _useEarnContext.vaultToken,
    recipientAddress = _useEarnContext.recipientAddress,
    depositAmount = _useEarnContext.depositAmount;
  const analyticsData = useMemo(() => ({
    amount: Number(depositAmount) || Number(depositedAmount),
    // fall back to depositedAmount to avoid sending 0
    address: recipientAddress ?? '',
    tokenAddress: vaultToken?.address ?? '',
    vaultAddress
  }), [depositedAmount, depositAmount, recipientAddress, vaultToken?.address, vaultAddress]);
  useEffect(() => {
    if (transactionState === 'buildingTransaction') {
      successSent.current = false; // in case user does a second deposit
      sendAnalytics(EarnEvent.EarnDepositInitiated, analyticsData);
    }
    if (transactionState === 'success' && !successSent.current) {
      successSent.current = true;
      sendAnalytics(EarnEvent.EarnDepositSuccess, analyticsData);
    }
    if (transactionState === 'error' && !errorSent.current) {
      errorSent.current = true;
      sendAnalytics(EarnEvent.EarnDepositFailure, analyticsData);
    }
  }, [transactionState, analyticsData, sendAnalytics]);
  return {
    setTransactionState
  };
};
export { useDepositAnalytics };
//# sourceMappingURL=useDepositAnalytics.js.map
