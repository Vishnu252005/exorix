rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserAuthenticated(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isValidUserData() {
      let validUserFields = [
        'firstName', 'lastName', 'email', 'createdAt', 'updatedAt',
        'isAdmin', 'events', 'blogs', 'createdEvents', 'jobs'
      ];
      
      return request.resource.data.keys().hasAll(['email', 'firstName', 'lastName']) &&
             request.resource.data.keys().hasOnly(validUserFields);
    }
    
    function isValidEventData() {
      let validEventFields = [
        'title', 'description', 'date', 'location', 'capacity',
        'createdBy', 'creatorEmail', 'createdAt', 'updatedAt', 'registeredUsers', 'status'
      ];
      
      return request.resource.data.keys().hasAll([
        'title', 'description', 'date', 'location', 'capacity'
      ]) &&
      request.resource.data.keys().hasOnly(validEventFields);
    }

    function isValidJobData() {
      let validJobFields = [
        'title', 'department', 'location', 'type', 'description',
        'createdBy', 'creatorEmail', 'createdAt', 'updatedAt', 'applications'
      ];
      
      return request.resource.data.keys().hasAll([
        'title', 'department', 'location', 'type', 'description'
      ]) &&
      request.resource.data.keys().hasOnly(validJobFields);
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isEventOrganizer(eventId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
    }

    function canRegisterForEvent(eventId) {
      let event = get(/databases/$(database)/documents/events/$(eventId));
      return event.data.status == "Registration Open" && 
             event.data.registrationsCount < event.data.capacity;
    }

    function hasNotRegistered(eventId, userId) {
      return !exists(/databases/$(database)/documents/events/$(eventId)/registrations/$(userId));
    }

    // Helper function to validate NFT reward data
    function isValidNFTReward() {
      let incomingData = request.resource.data;
      return incomingData.name is string && incomingData.name.size() > 0 &&
             incomingData.description is string &&
             incomingData.imageUrl is string &&
             incomingData.tournament is string &&
             incomingData.eventDate is string &&
             incomingData.couponCode is string &&
             incomingData.status in ['active', 'claimed', 'expired'] &&
             incomingData.createdBy is string &&
             (incomingData.claimedBy == null || incomingData.claimedBy is string) &&
             (incomingData.mintDate == null || incomingData.mintDate is string);
    }

    // Admin collection rules
    match /admin/{email} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Users collection rules
    match /users/{userId} {
      // Allow reading user data if authenticated
      allow read: if isAuthenticated() && (isUserAuthenticated(userId) || isAdmin());
      
      // Allow creating their own user document
      allow create: if isAuthenticated() && isUserAuthenticated(userId);
      
      // Allow updating their own user document
      allow update: if isAuthenticated() && (isUserAuthenticated(userId) || isAdmin());
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }

    // Events collection rules
    match /events/{eventId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid || isAdmin());

      // Registration rules
      match /registrations/{userId} {
        allow read: if isAuthenticated() && (isUserAuthenticated(userId) || isAdmin());
        
        // Allow registration if:
        // 1. User is authenticated
        // 2. Event is open for registration
        // 3. Event has capacity
        allow create: if isAuthenticated() && 
          get(/databases/$(database)/documents/events/$(eventId)).data.status == "Registration Open" &&
          get(/databases/$(database)/documents/events/$(eventId)).data.registrationsCount < get(/databases/$(database)/documents/events/$(eventId)).data.capacity &&
          isUserAuthenticated(userId);
        
        // Allow users to update their own registration
        allow update: if isAuthenticated() && 
          (userId == request.auth.uid || 
           get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid || 
           isAdmin()) &&
          isUserAuthenticated(userId);
        
        // Allow users to delete their own registration
        allow delete: if isAuthenticated() && 
          (userId == request.auth.uid || 
           get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid || 
           isAdmin()) &&
          isUserAuthenticated(userId);
      }
    }

    // Blogs collection rules
    match /blogs/{blogId} {
      // Allow reading all blogs regardless of status
      allow read: if true;
      
      // Only authenticated users can create blogs with proper fields
      allow create: if isAuthenticated() && 
                     resource.data.authorId == request.auth.uid;
      
      // Authors can update their own blogs
      allow update: if isAuthenticated() && 
                    (resource.data.authorId == request.auth.uid || isAdmin());
      
      // Only admins or the author can delete blogs
      allow delete: if isAuthenticated() && 
                    (resource.data.authorId == request.auth.uid || isAdmin());

      // Comments subcollection rules
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && 
                              (resource.data.authorId == request.auth.uid || isAdmin());
      }

      // Likes subcollection rules
      match /likes/{likeId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow delete: if isAuthenticated() && 
                      (resource.data.userId == request.auth.uid || isAdmin());
      }
    }

    // Auth collection for user profiles
    match /auth/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Public profiles collection
    match /profiles/{userId} {
      allow read: if true;
      allow write: if request.auth.uid == userId;
    }

    // Jobs collection rules
    match /jobs/{jobId} {
      // Anyone can read job openings
      allow read: if true;
      
      // Anyone can create job openings (no authentication required)
      // This allows anonymous users to post jobs
      allow create: if true;
      
      // Only the creator of the job or an admin can update it
      // For anonymous users (createdBy == 'anonymous'), only admins can update
      allow update: if 
        (isAuthenticated() && resource.data.createdBy == request.auth.uid) || 
        isAdmin();
      
      // Only the creator of the job or an admin can delete it
      // For anonymous users (createdBy == 'anonymous'), only admins can delete
      allow delete: if 
        (isAuthenticated() && resource.data.createdBy == request.auth.uid) || 
        isAdmin();
        
      // Applications subcollection
      match /applications/{applicationId} {
        // Job creators and admins can read all applications
        // Applicants can only read their own applications
        allow read: if isAuthenticated() && (
          resource.data.applicantId == request.auth.uid || 
          get(/databases/$(database)/documents/jobs/$(jobId)).data.createdBy == request.auth.uid || 
          isAdmin()
        );
           
        // Any authenticated user can apply for a job
        allow create: if isAuthenticated();
        
        // Users can only update or delete their own applications
        // Job creators and admins can also update application status
        allow update: if isAuthenticated() && (
          resource.data.applicantId == request.auth.uid || 
          get(/databases/$(database)/documents/jobs/$(jobId)).data.createdBy == request.auth.uid || 
          isAdmin()
        );
           
        allow delete: if isAuthenticated() && (
          resource.data.applicantId == request.auth.uid || 
          get(/databases/$(database)/documents/jobs/$(jobId)).data.createdBy == request.auth.uid || 
          isAdmin()
        );
      }
    }

    // NFT Collection rules
    match /nft/{nftId} {
      // Anyone can read NFT data
      allow read: if isAuthenticated();

      // Any authenticated user can create a valid NFT
      allow create: if isAuthenticated() && isValidNFTReward();

      // Only the creator or admin can update or delete
      allow update: if isAuthenticated() &&
        (resource.data.createdBy == request.auth.uid || isAdmin()) && isValidNFTReward();

      allow delete: if isAuthenticated() &&
        (resource.data.createdBy == request.auth.uid || isAdmin());
    }

    // Admin collection - only admins can read/write
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 